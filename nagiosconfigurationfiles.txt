[root@prodnagios nagios]# pwd
/usr/local/nagios
[root@prodnagios nagios]# ls
bin  etc  include  libexec  sbin  share  share1  var
[root@prodnagios nagios]# cd libexec
[root@prodnagios libexec]# ls
@                                               check_rabbitmq_queue_q.campaign.obd.IN          Prod-FarmRiseApp-1a-01_Disk
AdminconsoleCheck_Url                           check_rabbitmq_queue_q.job.campaignschedule.IN  Prod-FarmRiseApp-1a-01_Memory
Autoscaled-Prod-AsyncJobExecutor                check_rabbitmq_queue_sms.commodity.IN           Prod-FarmRiseApp-1a-01_servicestatus
Autoscaled-Prod-AsyncJobExecutorDiskUsage       check_real                                      Prod-FarmRiseApp-1a-01.zip
Autoscaled-ProdAsyncJobExecutor_DiskUsage       check_rpc                                       Prod-FarmRiseApp-1c-01
Autoscaled-Prod-AsyncJobExecutorMemoryUsage     check_sensors                                   Prod-FarmRiseApp-1c-01_CPU
AutoscaledProdCallCenter-2                      check_smtp                                      Prod-FarmRiseApp-1c-01_Disk
AutoscaledProdCallCenter-2DiskUsage             check_ssh                                       Prod-FarmRiseApp-1c-01_Memory
AutoscaledProdCallCenter-2MemoryUsage           check_swap                                      Prod-FarmRiseApp-1c-01_servicestatus
Autoscaled-ProdCommodityService2                check_tcp                                       Prod-FarmRiseApp-1c-01.zip
Autoscaled-ProdCommodityService2DiskUsage       check_time                                      Prod-FarmRiseAppcpu
Autoscaled-ProdCommodityService2_DiskUsage      check_udp                                       Prod-FarmRiseAppdisk
Autoscaled-ProdCommodityService2MemoryUsage     check_ups                                       Prod-FarmRiseAppmemory
Autoscaled-Prod-ContentDelivery                 check_uptime                                    Prod-FarmRiseAppservice
Autoscaled-Prod-ContentDeliveryDiskUsage        check_url                                       ProdFarmRiseAppUrl
Autoscaled-Prod-ContentDeliveryMemoryUsage      check_url1                                      Prod-FarmRiseEvent
Autoscaled-Prod-ContentSevice-1                 check_url2                                      Prod-FarmRiseEvent-1b-01-CPU
Autoscaled-Prod-ContentSeviceDiskUsage          check_url3                                      Prod-FarmRiseEvent-1b-01-Disk
Autoscaled-ProdContentSevice_DiskUsage          check_url4                                      Prod-FarmRiseEvent-1b-01-Memory
Autoscaled-Prod-ContentSeviceMemoryUsage        check_users                                     Prod-FarmRiseEvent-Service-status
AutoscaledProdDiagnosticContent2                check_wave                                      Prod-FarmRiseEvent.zip
AutoscaledProdDiagnosticContent2DiskUsage       cpu                                             Prod-farmrise-News
AutoscaledProdDiagnosticContent2MemoryUsage     cpu1                                            Prod-farmrise-News-CPU
AutoscaledProdDiagnosticService                 cpu11                                           Prod-farmrise-News_disk
AutoscaledProdDiagnosticServiceDiskUsage        CPUWITHPROCESS                                  Prod-farmrise-News_memory
AutoscaledProdDiagnosticServiceMemoryUsage      DiagnosticcontentCreationCheck_Url              Prod-farmrise-News_servicestatus
Autoscaled-Prod-GrowerService-2                 DiagnosticcontentViewCheck_Url                  Prod-farmrise-News.zip
Autoscaled-Prod-GrowerService-2DiskUsage        FarmersfirstCheckGitLab_Url                     Prod-GrowerService-1a
Autoscaled-Prod-GrowerService-2MemoryUsage      FarmersfirstCheckJenkins_Url                    Prod-GrowerService-1a_1.zip
Autoscaled-Prod-InboundService-2                FarmersfirstCheckJira_Url                       Prod-GrowerService-1aDiskUsage
AutoscaledProdInboundServiceDiskUsage           FarmersfirstCheckNonProdKibana_Url              Prod-GrowerService-1aMemoryUsage
AutoscaledProdInboundServiceMemoryUsage         FarmersfirstCheckProdKibana_Url                 Prod-GrowerService-1a_servicestatus
Autoscaled-Prod-IVRBackendDiskUsage             FarmersfirstCheck_Url                           Prod-InboundService
Autoscaled-Prod-IVRBackendMemoryUsage           FarmersfirstProdCommodityServiceCheck_Url       Prod-InboundService_1.zip
Autoscaled-Prod-IVRBackendService               FarmersfirstProdInboundCheck_Url                Prod-InboundServiceCpuUtilization
Autoscaled-ProdMobileWeb2                       FarmersfirstProdivrbackendserviceCheck_Url      ProdInboundServiceDiskUsage
Autoscaled-ProdMobileWeb2DiskUsage              FarmersfirstProdMbilewebServiceCheck_Url        ProdInboundServiceMemoryUsage
Autoscaled-ProdMobileWeb2MemoryUsage            FarmersfirstProdRetailerServiceCheck_Url        ProdInteractionLogService-1a
Autoscaled-Prod-NotificationService             FarmersfirstProdrRbbitmqCheck_Url               ProdInteractionLogService-1aDiskUsage
Autoscaled-Prod-NotificationServiceDiskUsage    FarmersfirstSonarCheck_Url                      ProdInteractionLogService1a_DiskUsage
Autoscaled-Prod-NotificationServiceMemoryUsage  logscriptsnew                                   ProdInteractionLogService-1aMemoryUsage
Autoscaled-Prod-RetailerService-2               logscriptsnew.zip                               ProdInteractionLogService-1c
AutoscaledProdRetailerService_DiskUsage         nagios-plugins-rabbitmq                         ProdInteractionLogService-1cDiskUsage
AutoscaledProdRetailerServiceDiskUsage-2        negate                                          ProdInteractionLogService-1cMemoryUsage
AutoscaledProdRetailerServiceMemoryUsage-2      PreProdDrupalCheck_Url                          Prod-IVRBackend-1aDiskUsage
Autoscaled-Prod-SMSBroker                       Prod-AdminConsole1aService                      Prod-IVRBackend-1aMemoryUsage
AutoscaledProdSMSBrokerCpuUtilization           Prod-AdminConsole1cService                      ProdIVRBackendCpuUtilization
Autoscaled-Prod-SMSBrokerDiskUsage              ProdAdminConsoleDiskUsage                       Prod-IVRBackendService
Autoscaled-Prod-SMSBrokerMemoryUsage            ProdAdminConsole_DiskUsage                      Prod-JobManager1a01
AutoscaledProdSystemDataDisk-2                  ProdAdminConsoleDiskUsage1c                     Prod-JobManager1a01DiskUsage
AutoscaledProdSystemDataMemory                  ProdAdminConsole_DiskUsage1c                    Prod-JobManager1a01MemoryUsage
AutoscaledProdSystemDataMemory-2                ProdAdminConsoleMemoryUsage                     Prod-LookupService1a_DiskUsage
Autoscaled-ProdSystemDataService                ProdAdminConsoleMemoryUsage1c                   Prod-LookupService-1c
AutoscaledProdWeatherServiceDiskUsage           Prod-AsyncJobExecutor-1a                        Prod-LookupService-1cDiskUsage
AutoscaledProdWeatherService_DiskUsage          Prod-AsyncJobExecutor-1aDiskUsage               Prod-LookupService1c_DiskUsage
AutoscaledProdWeatherServiceMemoryUsage         Prod-AsyncJobExecutor-1aMemoryUsage             Prod-LookupService-1cMemoryUsage
CallcenterCheck_Url                             ProdAutoscaledInboundServiceCpuUtilization      Prod-LookupService-la
check_apt                                       ProdAutoscaledIVRBackendCpuUtilization          Prod-LookupService-laDiskUsage
check_breeze                                    Prod-BatchService                               Prod-LookupService-laMemoryUsage
check_by_ssh                                    Prod-BatchService-1aDiskUsage                   ProdMObileCpu
check_cassandra_cluster1.sh                     Prod-BatchService-1aMemoryUsage                 ProdMobileDisk
check_cassandra_cluster.sh                      ProdBatchServiceCpuUtilization                  ProdMobileMemory
check_cassandra_cluster.sh.1                    Prod-BatchServiceUtilization                    ProdMobileService
check_clamd                                     ProdCallCenter1a                                ProdMobileUrl
check_cluster                                   ProdCallCenter1aDiskUsage                       ProdMobileWeb1a-01
check_dhcp                                      ProdCallCenter1aMemoryUsage                     ProdMobileWeb1a-011DiskUsage
check_dig                                       ProdCampaignService                             ProdMobileWeb1a-01MemoryUsage
check_disk                                      ProdCampaignService1a                           ProdMobileWeb1a1_DiskUsage
check_disk_smb                                  ProdCampaignService1aDiskUsage                  Prod-NotificationService-1a
check_dns                                       ProdCampaignService1aMemoryUsage                Prod-NotificationService-1aDiskUsage
check_dummy                                     ProdCampaignServiceDiskUsage                    Prod-NotificationService1a_DiskUsage
check_file_age                                  ProdCampaignService-ex                          Prod-NotificationService-1aMemoryUsage
check_flexlm                                    ProdCampaignServiceMemoryUsage                  Prod-RetailerService
check_ftp                                       Prod-Cassandra1a02Cpu_Usage                     ProdRetailerServiceDiskUsage
check_http                                      Prod-Cassandra1a02Memory_Usage                  ProdRetailerService_DiskUsage
check_http1                                     Prod-Cassandra1a02RootDisk_Usage                ProdRetailerServiceMemoryUsage
check_https                                     Prod-Cassandra1a02Service                       ProdRetailerServicePort
check_icmp                                      Prod-Cassandra1a03Cpu_Usage                     Prod-SearchService
check_ide_smart                                 Prod-Cassandra1a03Memory_Usage                  ProdSearchServiceCpuUtilization
check_ifoperstatus                              Prod-Cassandra1a03RootDisk_Usage                Prod-SearchService-CupUtilization
check_ifstatus                                  Prod-Cassandra1a03Service                       ProdSearchServiceDiskUsage
check_imap                                      Prod-Cassandra1a04Cpu_Usage                     ProdSearchServiceMemoryUsage
check_ircd                                      Prod-Cassandra1a04Memory_Usage                  Prod-SMSBroker-1a
check_load                                      Prod-Cassandra1a04RootDisk_Usage                Prod-SMSBroker-1aDiskUsage
check_log                                       Prod-Cassandra1aCpu_Usage                       Prod-SMSBroker-1aMemoryUsage
check_mailq                                     Prod-Cassandra1aDisk_Usage                      ProdSMSBrokerCpuUtilization
check_mrtg                                      Prod-Cassandra1aMemory_Usage                    Prod-SystemData-1a-01
check_mrtgtraf                                  Prod-Cassandra1aRootDisk_Usage                  Prod-SystemData-1a-01_servicestatus
check_nagios                                    Prod-Cassandra1aService                         Prod-SystemData-1a-01.zip
check_nntp                                      ProdCommodityService-1a01                       ProdSystemDataDiskUsage
check_nrpe                                      ProdCommodityService-1a01DiskUsage              ProdSystemData_DiskUsage
check_nrpe_withargs                             ProdCommodityService-1a01MemoryUsage            ProdSystemDataMemoryUsage
check_nt                                        Prod-ContentDelivery-1aDiskUsage                Prod-SystemDataService
check_ntp                                       Prod-ContentDelivery-1a_DiskUsage               ProdWeatherService1aDiskUsage
check_ntp_peer                                  Prod-ContentDelivery-1aMemoryUsage              Prod-WeatherService1a_DiskUsage
check_ntp_time                                  Prod-ContentDeliveryService                     ProdWeatherService1aMemoryUsage
check_nwstat                                    Prod-ContentService-1a                          urlize
check_oracle                                    Prod-ContentService-1aDiskUsage                 usr
check_overcr                                    Prod-ContentService-1a_DiskUsage                Utility-ElasticSearch-ProdNode-1_cpu
check_ping                                      Prod-ContentService-1aMemoryUsage               Utility-ElasticSearch-ProdNode-1_disk
check_pop                                       Prod-DiagnosticContent1a                        Utility-ElasticSearch-ProdNode-1_memory
check_procs                                     Prod-DiagnosticContent1aDiskUsage               Utility-ElasticSearch-ProdNode-2_cpu
check_rabbitmq_aliveness                        Prod-DiagnosticContent1aMemoryUsage             Utility-ElasticSearch-ProdNode-2_disk
check_rabbitmq_cluster                          ProdDiagnosticService1a01                       Utility-ElasticSearch-ProdNode-2_memory
check_rabbitmq_connections                      ProdDiagnosticService1a01DiskUsage              Utility-ElasticSearch-ProdNode-3_cpu
check_rabbitmq_exchange                         prodDiagnosticService1a01MemoryUsage            Utility-ElasticSearch-ProdNode-3_disk
check_rabbitmq_overview                         ProdDiagnosticService1a_DiskUsage               Utility-ElasticSearch-ProdNode-3_memory
check_rabbitmq_partition                        ProdDrupalCheck_Url                             utils.pm
check_rabbitmq_queue                            Prod-FarmRiseApp-1a-01                          utils.sh
check_rabbitmq_queue_in.queue.sms               Prod-FarmRiseApp-1a-01_CPU
[root@prodnagios libexec]#







[root@prodnagios libexec]# cat ProdCampaignService1aDiskUsage
#!/bin/bash
used_space=`df -h / | grep -v Filesystem | awk '{print $5}' | sed 's/%//g'`
case $used_space in
[1-70]*)
echo "OK - $used_space% of disk space used."
exit 0
;;
[71-85]*)
echo "WARNING - $used_space% of disk space used."
exit 1
;;
[86-100]*)
echo "CRITICAL - $used_space% of disk space used."
exit 2
;;
*)
echo "UNKNOWN - $used_space% of disk space used."
exit 3
;;
esac

[root@prodnagios libexec]#





#################



[root@prodnagios libexec]# cat prodDiagnosticService1a01MemoryUsage
#!/bin/bash
################################################################################
#This plugin is loosely inspired by check_mem v1.1 from Lukasz Gogolin
#https://exchange.nagios.org/directory/Plugins/System-Metrics/Memory/check_mem-2Esh/details
#I did a code cleanup and added a check of "free" version, because since
#procps-ng 3.3.0 (RHEL 7+) check_mem.sh doesn't work anymore (buff/cache column)
################################################################################
# 1.1 - Added -l flag and LEGACY_PERFATA var to put legacy perfdata mode
################################################################################
#Nagios Constants
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
SCRIPTPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'`
if [[ -f ${SCRIPTPATH}/utils.sh ]]; then
        . ${SCRIPTPATH}/utils.sh # use nagios utils to set real STATE_* return values
fi

#Useful functions
printversion(){
        echo "$0 $VERSION"
        echo
}

printusage() {
        printversion
        echo "Usage:"
        echo "  check_mem_ng.sh [-w <warnlevel>] [-c <critlevel>] [-v] [-l]"
        echo "    checks local host available memory"
        echo "    warnlevel and critlevel is percentage value without %"
        echo "    defaults being respectively 80 et 90"
        echo "    add -v for verbose (debuging purpose)"
        echo "    add -l for legacy perfdata mode (or change LEGACY_PERFDATA variable in script)"
        echo "  check_mem_ng.sh -V"
        echo "    prints version"
        echo "  check_mem_ng.sh -h"
        echo "    prints help (this message)"
}


printvariables() {
        echo "Variables:"
        #Add all your variables at the en of the "for" line to display them in verbose
        for i in WARNING_THRESHOLD CRITICAL_THRESHOLD FINAL_STATE FINAL_COMMENT LEGACY_PERFDATA FREE_OUTPUT TOTAL_MEM FREE_MEM BUFFCACHE_MEM BUFF_MEM CACHE_MEM USED_MEM TOTAL_MEM_MB USED_MEM_MB WARNING_THRESHOLD_B CRITICAL_THRESHOLD_B USED_MEM_PRC ENABLE_PERFDATA VERSION
        do
                echo -n "$i : "
                eval echo \$${i}
        done
        echo
}

#Set to unknown in case of unplaned exit
FINAL_STATE=$STATE_UNKNOWN
FINAL_COMMENT="UNKNOWN: Unplaned exit. You should check that everything is alright"

#Default values
WARNING_THRESHOLD=80
CRITICAL_THRESHOLD=90
ENABLE_PERFDATA=1
VERSION="1.1"
VERBOSE=0

#####FORCE LEGACY MODE#####
#put 1 to force legacy perfdata mode without using "-l" flag (no configuration change in nrpe.cfg)
LEGACY_PERFDATA=0
#####FORCE LEGACY MODE#####

#Process arguments
while getopts ":c:hlvVw:" opt; do
        case $opt in
                c)
                        CRITICAL_THRESHOLD=$OPTARG
                        ;;
                h)
                        printusage
                        exit $STATE_OK
                        ;;
                l)
                        LEGACY_PERFDATA=1
                        ;;
                v)
                        echo "Verbose mode ON"
                        echo
                        VERBOSE=1
                        ;;
                V)
                        printversion
                        exit $STATE_UNKNOWN
                        ;;
                w)
                        WARNING_THRESHOLD=$OPTARG
                        ;;
                \?)
                        echo "UNKNOWN: Invalid option: -$OPTARG"
                        exit $STATE_UNKNOWN
                        ;;
                :)
                        echo "UNKNOWN: Option -$OPTARG requires an argument."
                        exit $STATE_UNKNOWN
                        ;;
        esac
done

#Real check begins here
FREE_OUTPUT=`free -b | grep Mem:`
TOTAL_MEM=`echo $FREE_OUTPUT |awk '{print $2}'`
FREE_MEM=`echo $FREE_OUTPUT |awk '{print $4}'`
if [ `free -V | grep procps-ng | wc -l` -eq 1  ]; then
        #procps-ng, free will display buff/cache as one column
        BUFFCACHE_MEM=`echo $FREE_OUTPUT |awk '{print $6}'`
        if [ $LEGACY_PERFDATA -eq 1 ] ; then
                #Get BUFFER and CACHE separatly for legacy output
                FREE_OUTPUT2=`free -b | grep Mem:`
                BUFF_MEM=`echo $FREE_OUTPUT2 |awk '{print $6}'`
                CACHE_MEM=`echo $FREE_OUTPUT2 |awk '{print $7}'`
        fi
else
        #procps, free will display buff/cache as two separate columns
        BUFF_MEM=`echo $FREE_OUTPUT |awk '{print $6}'`
        CACHE_MEM=`echo $FREE_OUTPUT |awk '{print $7}'`
        BUFFCACHE_MEM=$(($BUFF_MEM+$CACHE_MEM))
fi

#Deduce used memory from total/free/buffer+cache
USED_MEM=$(($TOTAL_MEM-$FREE_MEM-$BUFFCACHE_MEM))

#Convert in MB for pseudo "human readable" plugin output. Todo, real human readable?
TOTAL_MEM_MB=`echo "$TOTAL_MEM / 1048576" | bc`
USED_MEM_MB=`echo "$USED_MEM / 1048576" | bc`
WARNING_THRESHOLD_B=`echo "$WARNING_THRESHOLD * $TOTAL_MEM / 100" | bc`
CRITICAL_THRESHOLD_B=`echo "$CRITICAL_THRESHOLD * $TOTAL_MEM / 100" | bc`

#Convert in percents used memory
USED_MEM_PRC=$((($USED_MEM*100)/$TOTAL_MEM))

#Check if available memory is below thresholds
if [ "$USED_MEM_PRC" -ge "$CRITICAL_THRESHOLD" ]; then
        FINAL_STATE=$STATE_CRITICAL
        FINAL_COMMENT="CRITICAL: Memory above critical threshold. Total: ${TOTAL_MEM_MB} MB - Used: ${USED_MEM_MB} MB - ${USED_MEM_PRC}% used!"
elif [ "$USED_MEM_PRC" -ge "$WARNING_THRESHOLD" ]; then
        FINAL_STATE=$STATE_WARNING
        FINAL_COMMENT="WARNING: Memory above warning threshold. Total: ${TOTAL_MEM_MB} MB - Used: ${USED_MEM_MB} MB - ${USED_MEM_PRC}% used!"
else
        FINAL_STATE=$STATE_OK
        FINAL_COMMENT="OK: Memory below thresholds. Total: ${TOTAL_MEM_MB} MB - Used: ${USED_MEM_MB} MB - ${USED_MEM_PRC}% used."
fi

#Perfdata processing
#if [ $ENABLE_PERFDATA -eq 1 ] ; then
#        #Added check_mem.sh legacy perfdata mode, to ease migration
#        if [ $LEGACY_PERFDATA -eq 1 ] ; then
 #               PERFDATA=" | TOTAL=$TOTAL_MEM;;;; USED=$USED_MEM;;;; CACHE=$CACHE_MEM;;;; BUFFER=$BUFF_MEM;;;;"
 #       else
 #               PERFDATA=" | Memory_Used=${USED_MEM}B;$WARNING_THRESHOLD_B;$CRITICAL_THRESHOLD_B;0;$TOTAL_MEM;"
 #       fi
#fi

#Script end, display verbose information
if [[ $VERBOSE -eq 1 ]] ; then
        printvariables
fi

echo ${FINAL_COMMENT}${PERFDATA}
exit $FINAL_STATE


###########





[root@prodnagios libexec]# cat check_rabbitmq_cluster
#!/usr/bin/env perl
#
# check_rabbitmq_cluster
#
# Use the management API to check how many node are alive in the cluster.

use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '2.0.3';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);


##############################################################################
# define and get the command line options.
#   see the command line option guidelines at
#   http://nagiosplug.sourceforge.net/developer-guidelines.html#PLUGOPTIONS


# Instantiate Monitoring::Plugin object (the 'usage' parameter is mandatory)
my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to check how many node are in the cluster',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);

$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 15672
);

$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);

$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'ssl_strict|ssl_strict!',
    help => "Verify SSL certificate (default: true)",
    default => 1
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);

$p->add_arg(spec => 'proxyurl=s',
    help => "Use proxy url like http://proxy.domain.com:8080",
);

$p->add_arg(spec => 'nodes|n=s',
    help => "Comma separated list of expected nodes in the cluster",
);

$p->add_arg(
    spec => 'warning|w=s',
    help =>
qq{-w, --warning=THRESHOLD[,THRESHOLD[,THRESHOLD]]
   Warning thresholds specified in order that the metrics are returned.
   Specify -1 if no warning threshold.},

);

$p->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=THRESHOLD[,THRESHOLD[,THRESHOLD]]
   Critical thresholds specified in order that the metrics are returned.
   Specify -1 if no critical threshold.},
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;

# perform sanity checking on command line options
my %warning;
if (defined $p->opts->warning) {
    my @warning = split(',', $p->opts->warning);
    $p->nagios_die("You should specify 1 to 3 ranges for --warning argument") unless $#warning < 3;

    $warning{'nb_running_node'} = shift @warning;
    $warning{'nb_running_disc_node'} = shift @warning;
    $warning{'nb_running_ram_node'} = shift @warning;
}

my %critical;
if (defined $p->opts->critical) {
    my @critical = split(',', $p->opts->critical);
    $p->nagios_die("You should specify specify 1 to 3 ranges for --critical argument") unless $#critical < 3;

    $critical{'nb_running_node'} = shift @critical;
    $critical{'nb_running_disc_node'} = shift @critical;
    $critical{'nb_running_ram_node'} = shift @critical;
}

# check stuff.
my $hostname=$p->opts->hostname;
my $port=$p->opts->port;

my $url = sprintf("http%s://%s:%d/api/nodes", ($p->opts->ssl ? "s" : ""), $hostname, $port);
my $ua = LWP::UserAgent->new;

if (defined $p->opts->proxyurl)
{
    $ua->proxy('http', $p->opts->proxyurl);
}
elsif($p->opts->proxy == 1 )
{
    $ua->env_proxy;
}
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
if ($p->opts->ssl and $ua->can('ssl_opts')) {
    $ua->ssl_opts(verify_hostname => $p->opts->ssl_strict);
}

my ($retcode, $result) = request($url);
if ($retcode != 200) {
    $p->nagios_exit(CRITICAL, "$result : $url");
}

my $values = {};
$values->{'running_nodes'} = ();
$values->{'nb_running_node'} = 0;
$values->{'nb_running_disc_node'} = 0;
$values->{'nb_running_ram_node'} = 0;

foreach my $node ( @$result ) {
    if ($node->{"name"} && $node->{"running"}) {
        push @{ $values->{'running_nodes'} }, $node->{"name"};

        $values->{'nb_running_node'}++;
        $values->{'nb_running_disc_node'}++ if ($node->{"type"} && $node->{"type"} eq "disc");
        $values->{'nb_running_ram_node'}++ if ($node->{"type"} && $node->{"type"} eq "ram");
    }
}

my $code = 0;
my $message = "";

if (defined($p->opts->nodes)) {
    my @nodes = split(',', $p->opts->nodes);
    my @excluded_nodes = diff(\@nodes, \@{ $values->{'running_nodes'} });
    my $nb_excluded_nodes = @excluded_nodes;
    ($code, $message) = (OK, "All nodes are running");
    ($code, $message) = (CRITICAL, "$nb_excluded_nodes failed cluster node: " . join(',', @excluded_nodes)) if($nb_excluded_nodes ne 0);
}
else {
    my @metrics = ("nb_running_node", "nb_running_disc_node", "nb_running_ram_node");
    for my $metric (@metrics) {
        my $warning = undef;
        $warning = $warning{$metric} if (defined $warning{$metric} and $warning{$metric} ne -1);

        my $critical = undef;
        $critical = $critical{$metric} if (defined $critical{$metric} and $critical{$metric} ne -1);

        my $value = 0;
        $value = $values->{$metric} if defined $values->{$metric};
        my $code = $p->check_threshold(check => $value, warning => $warning, critical=> $critical);
        $p->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value));
    }
    ($code, $message) = $p->check_messages(join_all=>', ');
}

$p->nagios_exit(return_code => $code, message => $message);

sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    $req->authorization_basic($p->opts->username, $p->opts->password);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

sub diff {
    my ($array_1, $array_2) = (@_);
    return grep { my $baz = $_; !grep{$_ eq $baz} @$array_2; } @$array_1;
}

=head1 NAME

check_rabbitmq_cluster - Nagios plugin using RabbitMQ management API to check how many node are alive in the cluster

=head1 SYNOPSIS

check_rabbitmq_cluster [options] -H hostname

=head1 DESCRIPTION

Use the `/api/nodes` API to check how many node are alive in the cluster.

It uses Monitoring::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 15672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item -p | --password

The password for the user (default: guest)

=back

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_cluster -H rabbit.example.com

This returns a standard Nagios result:

    RABBITMQ_CLUSTER OK - The cluster has 3 nodes

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Monitoring::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

Thierno IB. BARRY

=cut








##############




[root@prodnagios libexec]# cat check_rabbitmq_connections
#!/usr/bin/env perl
#
# check_rabbitmq_connections
#
# Use the management APIs to check amount of connections
#
use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '2.0.3';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);

my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to monitor connections.',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 15672
);

$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(
    spec => 'warning|w=s',
    help =>
qq{-w, --warning=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Warning thresholds specified in order that the metrics are returned.
   Specify -1 if no warning threshold.},

);

$p->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Critical thresholds specified in order that the metrics are returned.
   Specify -1 if no critical threshold.},
);

$p->add_arg(
    spec => 'clientuser=s',
    help => 'Specify the client username to limit the connections for (optional)',
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'ssl_strict|ssl_strict!',
    help => "Verify SSL certificate (default: true)",
    default => 1
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);
$p->add_arg(spec => 'proxyurl=s',
    help => "Use proxy url like http://proxy.domain.com:8080",
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options
my %warning;
if (defined $p->opts->warning) {
    my @warning = split(',', $p->opts->warning);
    $p->nagios_die("You should specify 1 to 4 ranges for --warning argument") unless $#warning < 4;

    $warning{'connections'} = shift @warning;
    $warning{'connections_notrunning'} = shift @warning;
    $warning{'receive_rate'} = shift @warning;
    $warning{'send_rate'} = shift @warning;
}

my %critical;
if (defined $p->opts->critical) {
    my @critical = split(',', $p->opts->critical);
    $p->nagios_die("You should specify specify 1 to 4 ranges for --critical argument") unless $#critical < 4;

    $critical{'connections'} = shift @critical;
    $critical{'connections_notrunning'} = shift @critical;
    $critical{'receive_rate'} = shift @critical;
    $critical{'send_rate'} = shift @critical;
}


##############################################################################
# check stuff.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;

my $ua = LWP::UserAgent->new;
if (defined $p->opts->proxyurl)
{
    $ua->proxy('http', $p->opts->proxyurl);
}
elsif($p->opts->proxy == 1 )
{
    $ua->env_proxy;
}
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
if ($p->opts->ssl and $ua->can('ssl_opts')) {
    $ua->ssl_opts(verify_hostname => $p->opts->ssl_strict);
}

my $url = sprintf("http%s://%s:%d/api/connections", ($p->opts->ssl ? "s" : ""), $hostname, $port);
my ($retcode, $result) = request($url);
if ($retcode != 200) {
    $p->nagios_exit(CRITICAL, "$result : $url");
}

my $values = {};
$values->{'connections'} = 0;
$values->{'connections_notrunning'} = 0;
$values->{'receive_rate'} = 0;
$values->{'send_rate'} = 0;

for my $connection (@$result) {
    if (not defined($p->opts->clientuser) or $p->opts->clientuser eq $connection->{"user"}) {
        $values->{'connections'}++;
        $values->{'connections_notrunning'}++ if $connection->{"state"} ne "running";
        $values->{'receive_rate'} += $connection->{"recv_oct_details"}->{"rate"};
        $values->{'send_rate'} += $connection->{"send_oct_details"}->{"rate"};
    }
}

my @metrics = ("connections", "connections_notrunning", "receive_rate", "send_rate");
for my $metric (@metrics) {
    my $warning = undef;
    $warning = $warning{$metric} if (defined $warning{$metric} and $warning{$metric} ne -1);
    my $critical = undef;
    $critical = $critical{$metric} if (defined $critical{$metric} and $critical{$metric} ne -1);

    my $value = 0;
    $value = $values->{$metric} if defined $values->{$metric};
    my $code = $p->check_threshold(check => $value, warning => $warning, critical=> $critical);
    $p->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value)) ;
    $p->add_perfdata(label=>$metric, value => $value, warning=>$warning, critical=> $critical);
}

my ($code, $message) = $p->check_messages(join_all=>', ');
$p->nagios_exit(return_code => $code, message => $message);


sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    $req->authorization_basic($p->opts->username, $p->opts->password);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

=head1 NAME

check_rabbitmq_connections - Nagios plugin using RabbitMQ management API to
count the connections running, their state and optionally limit these checks to
specific connected client user accounts.

=head1 SYNOPSIS

check_rabbitmq_connections [options] -H hostname

=head1 DESCRIPTION

Use the management interface of RabbitMQ to count the number of established
connections, those that are not in state running and also their throughput. All
values are published as performance metrics for the check.

Critical and warning thresholds can be set for each of the metric.

It uses Monitoring::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 15672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item -p | --password

The password for the user (default: guest)

=item -w | --warning

The warning levels for each count of connections established, connections
in a non-running state (flow, blocked), receive rate and send rate.  This
field consists of one to four comma-separated thresholds.  Specify -1 if
no threshold for a particular count.

=item -c | --critical

The critical levels for each count of connections established, connections
in a non-running state (flow, blocked), receive rate and send rate. This
field consists of one to four comma-separated thresholds.  Specify -1 if
no threshold for a particular count.

=item --clientuser

Specify the client username to limit the connections checks for.

=back

=head1 THRESHOLD FORMAT

The format of thresholds specified in --warning and --critical arguments
is defined at <http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

For example to be crtical if more than 5 connections, more than 2 connections not running,
less than 200b/s received use

--critical=5,2,200,-1

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_connections -H localhost -w 1: -c 1:

This returns a standard Nagios result:

  RABBITMQ_CONNECTIONS CRITICAL - connections CRITICAL (0),
    connections_notrunning WARNING (0), receive_rate OK (0) send_rate OK (0) |
    connections=0;;1: connections_notrunning=0;1:; receive_rate=0;; send_rate=0;;

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Monitoring::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

James Casey <jamesc.000@gmail.com>

=cut

1;




###########




[root@prodnagios libexec]# cat check_rabbitmq_queue
#!/usr/bin/env perl
#
# check_rabbitmq_overview
#
# Use the management APIs to check a queue
#
use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '2.0.3';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);

my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname --queue queue",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to monitor a specific queue.',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 15672
);

$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'vhost=s',
    help => "Specify the vhost where the queue resides (default: %s)",
    default => "/"
);
$p->add_arg(spec => 'queue=s',
    help => "Specify the queue to check (default: %s)",
    default => "all"
);

$p->add_arg(spec => 'filter=s',
    help => "Specify the queues to filter for the check. It's a perl regex (default: %s)",
    default => ".*"
);


$p->add_arg(
    spec => 'warning|w=s',
    help =>
qq{-w, --warning=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Warning thresholds specified in following order:
   messages[,messages_ready[,messages_unacknowledged[,consumers]]]
   Specify -1 if no warning threshold.},

);

$p->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Critical thresholds specified in following order:
   messages[,messages_ready[,messages_unacknowledged[,consumers]]]
   Specify -1 if no critical threshold.},
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'ssl_strict|ssl_strict!',
    help => "Verify SSL certificate (default: true)",
    default => 1
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);
$p->add_arg(spec => 'proxyurl=s',
    help => "Use proxy url like http://proxy.domain.com:8080",
);

$p->add_arg(spec => 'ignore|ignore!',
    help => "Ignore alerts if queue does not exist (default: false)",
    default => 0
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options
my %warning;
if (defined $p->opts->warning) {
    my @warning = split(',', $p->opts->warning);
    $p->nagios_die("You should specify 1 to 4 ranges for --warning argument") unless $#warning < 4;

    $warning{'messages'} = shift @warning;
    $warning{'messages_ready'} = shift @warning;
    $warning{'messages_unacknowledged'} = shift @warning;
    $warning{'consumers'} = shift @warning;
}

my %critical;
if (defined $p->opts->critical) {
    my @critical = split(',', $p->opts->critical);
    $p->nagios_die("You should specify specify 1 to 4 ranges for --critical argument") unless $#critical < 4;

    $critical{'messages'} = shift @critical;
    $critical{'messages_ready'} = shift @critical;
    $critical{'messages_unacknowledged'} = shift @critical;
    $critical{'consumers'} = shift @critical;
}


##############################################################################
# check stuff.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;
my $vhost=uri_escape($p->opts->vhost);
my $queue=$p->opts->queue;
my $filter=$p->opts->filter;
my $ignore=$p->opts->ignore;

my $ua = LWP::UserAgent->new;
if (defined $p->opts->proxyurl)
{
    $ua->proxy('http', $p->opts->proxyurl);
}
elsif($p->opts->proxy == 1 )
{
    $ua->env_proxy;
}
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
if ($p->opts->ssl and $ua->can('ssl_opts')) {
    $ua->ssl_opts(verify_hostname => $p->opts->ssl_strict);
}

my $url = "";
if ($queue eq "all"){
    $url = sprintf("http%s://%s:%d/api/queues/%s", ($p->opts->ssl ? "s" : ""), $hostname, $port, $vhost);
} else{
    $url = sprintf("http%s://%s:%d/api/queues/%s/%s", ($p->opts->ssl ? "s" : ""), $hostname, $port, $vhost, $queue);
}
my ($retcode, $result) = request($url);
if ($retcode == 404 && $ignore) {
    $p->nagios_exit(OK, "$result : $url");
}
if ($retcode != 200) {
    $p->nagios_exit(CRITICAL, "$result : $url");
}

my @values = ();
my @metrics = ("messages", "messages_ready", "messages_unacknowledged", "consumers");

for my $metric (@metrics) {
    my $warning = undef;
    $warning = $warning{$metric} if (defined $warning{$metric} and $warning{$metric} ne -1);
    my $critical = undef;
    $critical = $critical{$metric} if (defined $critical{$metric} and $critical{$metric} ne -1);
    if(ref($result) eq 'ARRAY'){
        my $message = "";
        my $nb_matched_queues = 0;
        my $sum_metric_value = 0;
        for my $queue (@$result){
            next if $queue->{name} !~ /$filter/i;
            my $value = 0;
            $value = $queue->{$metric} if defined $queue->{$metric};
            my $code = $p->check_threshold(check => $value, warning => $warning, critical=> $critical);
            push @values, $code;

            $nb_matched_queues++;
            $sum_metric_value += $value;

            $p->add_message($code, sprintf("$queue->{name} : $metric ".$STATUS_TEXT{$code}." (%d)", $value)) unless $code == 0;
        }
        $p->add_perfdata(label=>$metric, value=>sprintf("%.4f", $sum_metric_value/$nb_matched_queues), warning=>$warning, critical=> $critical);
    } else{
        my $value = 0;
        $value = $result->{$metric} if defined $result->{$metric};
        my $code = $p->check_threshold(check => $value, warning => $warning, critical=> $critical);
        push @values, $code;

        $p->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value)) ;
        $p->add_perfdata(label=>$metric, value => $value, warning=>$warning, critical=> $critical);
    }
}
$p->add_message(0, sprintf("All queues under the thresholds")) unless grep {$_ > 0} @values;

my ($code, $message) = $p->check_messages(join_all=>', ');

$code = 1 if grep /1/,@values;
$code = 2 if grep /2/,@values;

$p->nagios_exit(return_code => $code, message => $message);


sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    $req->authorization_basic($p->opts->username, $p->opts->password);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

=head1 NAME

check_rabbitmq_queue - Nagios plugin using RabbitMQ management API to
count the messages pending and consumers on a given queue

=head1 SYNOPSIS

check_rabbitmq_queue [options] -H hostname --queue queue

=head1 DESCRIPTION

Use the management interface of RabbitMQ to count the number of pending,
ready and unacknowledged messages and number of consumers.  These are
published as performance metrics for the check.

Critical and warning thresholds can be set for each of the metrics.

It uses Monitoring::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 15672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item --password | -p

The password for the user (default: guest)

=item -w | --warning

The warning levels for each count of messages, messages_ready,
messages_unacknowledged and consumers.  This field consists of
one to four comma-separated thresholds.  Specify -1 if no threshold
for a particular count.

=item -c | --critical

The critical levels for each count of messages, messages_ready,
messages_unacknowledged and consumers.  This field consists of
one to four comma-separated thresholds.  Specify -1 if no threshold
for a particular count.

=item --ignore

If the queue specified does not exist, this option ignores
CRITICAL alerts and returns a status of OK.  Useful for scenarios
where queue existence is optional.

=back

=head1 THRESHOLD FORMAT

The format of thresholds specified in --warning and --critical arguments
is defined at <http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

For example to be crtical if more than 100 messages, more than 90 messages_ready,
more than 20 messages_unacknowledged or no fewer than 10 consumers use

--critical=100,90,20,10:

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_queue -H rabbit.example.com

This returns a standard Nagios result:

    RABBITMQ_OVERVIEW OK - messages OK (25794) messages_ready OK (22971)
      messages_unacknowledged OK (2823) consumers OK (10) | messages=25794;;
      messages_ready=22971;; messages_unacknowledged=2823;; consumers=10;;

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Monitoring::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

James Casey <jamesc.000@gmail.com>

=cut

1;




#######





bin  etc  include  libexec  sbin  share  share1  var
[root@prodnagios nagios]# pwd
/usr/local/nagios
[root@prodnagios nagios]# ll
total 48
drwxrwxr-x  2 nagios nagios  4096 Dec 15  2016 bin
drwxrwxr-x  6 nagios nagios  4096 Aug  5 20:56 etc
drwxr-xr-x  2 root   root    4096 Dec 15  2016 include
drwxrwxr-x 10 nagios nagios 20480 Aug  7 22:01 libexec
drwxrwxr-x  2 nagios nagios  4096 Jan  4  2017 sbin
drwxrwxr-x 15 nagios nagios  4096 Dec 29  2016 share
drwxr-xr-x  2 root   root    4096 Dec 21  2016 share1
drwxrwxr-x  5 nagios nagios  4096 Aug 22 17:36 var
[root@prodnagios nagios]# cd etc/
[root@prodnagios etc]# ls
\  cgi.cfg  commands.cfg  htpasswd.users  nagios.cfg  newservices  newservices.zip  objects  resource.cfg  server-config-backup  servers
[root@prodnagios etc]# pwd
/usr/local/nagios/etc
[root@prodnagios etc]# cat commands.cfg
###############################################################################
# COMMANDS.CFG - SAMPLE COMMAND DEFINITIONS FOR NAGIOS 4.2.1
#
#
# NOTES: This config file provides you with some example command definitions
#        that you can reference in host, service, and contact definitions.
#
#        You don't need to keep commands in a separate file from your other
#        object definitions.  This has been done just to make things easier to
#        understand.
#
###############################################################################


################################################################################
#
# SAMPLE NOTIFICATION COMMANDS
#
# These are some example notification commands.  They may or may not work on
# your system without modification.  As an example, some systems will require
# you to use "/usr/bin/mailx" instead of "/usr/bin/mail" in the commands below.
#
################################################################################


# 'notify-host-by-email' command definition
define command{
        command_name    notify-host-by-email
        command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Host Alert: $HOSTNAME$ is $HOSTSTATE$ **" $CONTACTEMAIL$
        }

# 'notify-service-by-email' command definition
define command{
        command_name    notify-service-by-email
        command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
        }





################################################################################
#
# SAMPLE HOST CHECK COMMANDS
#
################################################################################


# This command checks to see if a host is "alive" by pinging it
# The check must result in a 100% packet loss or 5 second (5000ms) round trip
# average time to produce a critical error.
# Note: Five ICMP echo packets are sent (determined by the '-p 5' argument)

# 'check-host-alive' command definition
define command{
        command_name    check-host-alive
        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 5
        }




################################################################################
#
# SAMPLE SERVICE CHECK COMMANDS
#
# These are some example service check commands.  They may or may not work on
# your system, as they must be modified for your plugins.  See the HTML
# documentation on the plugins for examples of how to configure command definitions.
#
# NOTE:  The following 'check_local_...' functions are designed to monitor
#        various metrics on the host that Nagios is running on (i.e. this one).
################################################################################

# 'check_local_disk' command definition
define command{
        command_name    check_local_disk
        command_line    $USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
        }


# 'check_local_load' command definition
define command{
        command_name    check_local_load
        command_line    $USER1$/check_load -w $ARG1$ -c $ARG2$
        }


# 'check_local_procs' command definition
define command{
        command_name    check_local_procs
        command_line    $USER1$/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
        }


# 'check_local_users' command definition
define command{
        command_name    check_local_users
        command_line    $USER1$/check_users -w $ARG1$ -c $ARG2$
        }


# 'check_local_swap' command definition
define command{
        command_name    check_local_swap
        command_line    $USER1$/check_swap -w $ARG1$ -c $ARG2$
        }


# 'check_local_mrtgtraf' command definition
define command{
        command_name    check_local_mrtgtraf
        command_line    $USER1$/check_mrtgtraf -F $ARG1$ -a $ARG2$ -w $ARG3$ -c $ARG4$ -e $ARG5$
        }


################################################################################
# NOTE:  The following 'check_...' commands are used to monitor services on
#        both local and remote hosts.
################################################################################

# 'check_ftp' command definition
define command{
        command_name    check_ftp
        command_line    $USER1$/check_ftp -H $HOSTADDRESS$ $ARG1$
        }


# 'check_hpjd' command definition
define command{
        command_name    check_hpjd
        command_line    $USER1$/check_hpjd -H $HOSTADDRESS$ $ARG1$
        }


# 'check_snmp' command definition
define command{
        command_name    check_snmp
        command_line    $USER1$/check_snmp -H $HOSTADDRESS$ $ARG1$
        }


# 'check_http' command definition
define command{
        command_name    check_http
        command_line    $USER1$/check_http -I $HOSTADDRESS$ $ARG1$
        }


# 'check_ssh' command definition
define command{
        command_name    check_ssh
        command_line    $USER1$/check_ssh $ARG1$ $HOSTADDRESS$
        }


# 'check_dhcp' command definition
define command{
        command_name    check_dhcp
        command_line    $USER1$/check_dhcp $ARG1$
        }


# 'check_ping' command definition
define command{
        command_name    check_ping
        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5
        }


# 'check_pop' command definition
define command{
        command_name    check_pop
        command_line    $USER1$/check_pop -H $HOSTADDRESS$ $ARG1$
        }


# 'check_imap' command definition
define command{
        command_name    check_imap
        command_line    $USER1$/check_imap -H $HOSTADDRESS$ $ARG1$
        }


# 'check_smtp' command definition
define command{
        command_name    check_smtp
        command_line    $USER1$/check_smtp -H $HOSTADDRESS$ $ARG1$
        }


# 'check_tcp' command definition
define command{
        command_name    check_tcp
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$ $ARG2$
        }


# 'check_udp' command definition
define command{
        command_name    check_udp
        command_line    $USER1$/check_udp -H $HOSTADDRESS$ -p $ARG1$ $ARG2$
        }


# 'check_nt' command definition
define command{
        command_name    check_nt
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v $ARG1$ $ARG2$
        }



################################################################################
#
# SAMPLE PERFORMANCE DATA COMMANDS
#
# These are sample performance data commands that can be used to send performance
# data output to two text files (one for hosts, another for services).  If you
# plan on simply writing performance data out to a file, consider using the
# host_perfdata_file and service_perfdata_file options in the main config file.
#
################################################################################


# 'process-host-perfdata' command definition
define command{
        command_name    process-host-perfdata
        command_line    /usr/bin/printf "%b" "$LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTSTATE$\t$HOSTATTEMPT$\t$HOSTSTATETYPE$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$\n" >> /usr/local/nagios/var/host-perfdata.out
        }


# 'process-service-perfdata' command definition
define command{
        command_name    process-service-perfdata
        command_line    /usr/bin/printf "%b" "$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICESTATE$\t$SERVICEATTEMPT$\t$SERVICESTATETYPE$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$\n" >> /usr/local/nagios/var/service-perfdata.out
        }

define command{
command_name check_nrpe
command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ -a $ARG2$ $ARG3$ $ARG4$ $ARG5$ -t 30
}

define command{
command_name check_nrpe_args
command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ -w $ARG2$ -c  $ARG3$ -a  $ARG4$ $ARG5$ $ARG6$
}

define command{
command_name check_nrpe_no_args
command_line /usr/local/nagios/libexec/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}



#define command{
#        command_name    load_average
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c load_average -t 20
#        }
define command{
        command_name    lookup_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c lookup_service -t 20
        }
#define command{
#        command_name    lookup_service_port
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c lookup_service_port
#        }

#define command{
#        command_name    admin_port
#        command_line    $USER1$/admin_port
#        }

        define command{
        command_name    Pre-ProdMobileMemory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Pre-ProdMobileMemory
        }

        define command{
        command_name    Pre-ProdMobileDisk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Pre-ProdMobileDisk
        }

        define command{
        command_name    Pre-ProdMobileCpu
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Pre-ProdMobileCpu
        }

define command{
        command_name    Pre-ProdMobileService
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Pre-ProdMobileService
        #command_line   /usr/local/nagios/libexec/check_nrpe -H 18.1.1.226 -c Pre-ProdMobileService
        }

#define command{
#        command_name    MobileService
#        command_line    $USER1$/MobileService
#        }#define command{
#        command_name    port2
        #command_line    $USER1$/port2 -p 8033 -c 1.0 -w 1.5 -h StageMobileAppserver-1b-01 -v
#       command_line    $USER1$/port2 $ARG1$ $ARG2$ $ARG3$ $ARG4$ $ARG5$
#        }

define command{
        command_name    check_nrpe_withargs
command_line    /usr/local/nagios/libexec/check_nrpe_withargs -H $HOSTADDRESS$ -c $ARG1$
        }
#sshport

define command{
        command_name    check_nrpe_witharg
command_line    /usr/local/nagios/libexec/check_nrpe_witharg -H $HOSTADDRESS$ -c $ARG1$
        }



define command{
        command_name    Pre-ProdMobileUrl
        command_line    $USER1$/Pre-ProdMobileUrl NewMobileAppServer-STAGE-elb-1986347483.us-east-1.elb.amazonaws.com 80
        }


define command{
        command_name    PreProd-PostgresqlUrl
        command_line    $USER1$/pre-postgresql-db.cdgrcme2rcfh.us-east-1.rds.amazonaws.com 5432


        }




define command{
        command_name    admin_service
        command_line    $USER1$/admin_service
        }

define command{
        command_name    callcenter_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c callcenter_service
        }
define command{
        command_name    adminconsole_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c adminconsole_disk_usage
        }
define command{
        command_name    callcenter_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c callcenter_disk_usage
        }
define command{
        command_name    lookup_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c lookup_disk_usage
        }
define command{
        command_name    inbound_service_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c inbound_service_disk_usage
        }
define command{
        command_name    inbound_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c inbound_service
        }

#define command{
#        command_name    load_average
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c load_average
#        }


define command{
        command_name    jobmanger_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c jobmanger_disk_usage
        }
define command{
        command_name    jobmanger_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c jobmanger_service
        }
define command{
        command_name    ContentService_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c ContentService_disk_usage
        }
define command{
        command_name    Content_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Content_service
        }
define command{
        command_name    GrowerService_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c GrowerService_disk_usage
        }
define command{
        command_name    Grower_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Grower_service
        }
define command{
        command_name    SMSBroker_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SMSBroker_disk_usage
        }
define command{
        command_name    SMSBroker_Service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SMSBroker_Service
        }
define command{
        command_name    AsyncJobExecutor_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c AsyncJobExecutor_disk_usage
        }
define command{
        command_name    AsyncJobExecutor_Service
        command_line    $USER1$/AsyncJobExecutor_Service
        }
define command{
        command_name    SearchService_Port
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SearchService_Port
        }
define command{
        command_name    SearchService_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SearchService_Disk_Usage
        }
define command{
        command_name    BatchService_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c BatchService_Disk_Usage
        }
define command{
        command_name    BatchService_Port
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c BatchService_Port
        }
define command{
        command_name    CampaignService_Service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c CampaignService_Service
        }
define command{
        command_name    CampaignService_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c CampaignService_Disk_Usage
        }

define command{
        command_name    SystemData_Service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SystemData_Service
        }
define command{
        command_name    SystemData_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c SystemData_Disk_Usage
        }
define command{
        command_name    Commodity_disk_usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Commodity_disk_usage
        }
define command{
        command_name    Commodity_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Commodity_service
        }





#define command{
#        command_name    admin_port
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c admin_port
#        }

define command{
        command_name    DiagnosticService_Service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c DiagnosticService_Service
        }
define command{
        command_name    DiagnosticService_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c DiagnosticService_Disk_Usage
        }
#define command{
#        command_name    DiagnosticContent_Service_Disk_Usage
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c DiagnosticContent_Service_Disk_Usage
#        }
#define command{
#        command_name    DiagnosticContent_Service
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c DiagnosticContent_Service
#        }
define command{
        command_name    WeatherService_Disk_Usage
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c WeatherService_Disk_Usage
        }
define command{
        command_name    WeatherService_service
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c WeatherService_service
        }
#define command{
#        command_name    NotificationService_Disk_Usage
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c NotificationService_Disk_Usage
#        }
#define command{
#        command_name    NotificationService_service
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c NotificationService_service
#        }

# command to process nagios performance data for nagiosgraph
   define command {
      command_name process-service-perfdata-for-nagiosgraph
      command_line /usr/local/nagios/libexec/insert.pl
   }

define command{
        command_name    check_mem
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_mem

}
#define command{
#        command_name    CallCenter_Log.pl
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c CallCenter_Log.pl
#        }
#define command{
#        command_name    CallCenter_Log.pl
        #command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_log3 -l '/var/log/farmersfirst/adminconsole.log' -p 'too many open'  -w 1 -c 2
 #       command_line    $USER1$/CallCenter_Log.pl -l '/var/log/farmersfirst/callcenter.log.pl' -p 'too many open'  -w 1 -c 2
 #        }

#define command{
#        command_name    BatchCheck_log.pl
#        #command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_log3 -l '/var/log/farmersfirst/adminconsole.log' -p 'too many open'  -w 1 -c 2
#        command_line    $USER1$/BatchCheck_log.pl -l '/var/log/farmersfirst/batchservice.log' -p 'too many open'  -w 1 -c 2
#         }
#define command{
#        command_name   check_log3.pl
#        #command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_log3 -l '/var/log/farmersfirst/adminconsole.log' -p 'too many open'  -w 1 -c 2
#        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_log3.pl -l '/var/log/farmersfirst/adminconsole.log' -p 'too many open'  -w 1 -c 2
#         }

#define command{
#        command_name   check_log3.pl
#        #command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_log3 -l '/var/log/farmersfirst/adminconsole.log' -p 'too many open'  -w 1 -c 2
#        command_line    $USER1$/check_log3.pl -l '/root/adminconsole.properties' -p 'too many open'  -w 1 -c 2
#         }

####for check_log3###
#define command{
#        command_name    check_log3
#        command_line    $USER1$/check_log3 -H $HOSTADDRESS$ -c check_log3
#        }








define command{
        command_name    memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c memory
        }
define command{
        command_name    content_memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c content_memory
        }


define command{
        command_name    Memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Memory
        }


#define command {
# command_name check_rabbitmq_overview
# command_line $USER1$/nagios-plugins-rabbitmq/scripts/check_rabbitmq_overview -H "11.2.1.22" --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk"
#}


###########Rabbitmq commands ##########

define command {
 command_name check_rabbitmq_overview
 command_line $USER1$/check_rabbitmq_overview -H 11.2.1.22 --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk"
}

define command {
 command_name check_rabbitmq_cluster
 command_line $USER1$/check_rabbitmq_cluster -H 11.2.1.22 --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk"
}

define command {
 command_name check_rabbitmq_partition
 command_line $USER1$/check_rabbitmq_partition  -H Preprod-RabbitMQ-01 --port=15672 --user "farmersfirst" --password "hY7CNkEpULAk"
}

define command {
 command_name check_rabbitmq_aliveness
 command_line $USER1$/check_rabbitmq_aliveness  -H 11.2.1.22 --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk"
}

define command {
 command_name check_rabbitmq_queue
command_line $USER1$/check_rabbitmq_queue  -H 11.2.1.22 --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk" --warning=-1: --critical=-1
}

define command {
 command_name check_rabbitmq_connections
 command_line $USER1$/check_rabbitmq_connections  -H Preprod-RabbitMQ-01   --port=15672 -u "farmersfirst" -p "hY7CNkEpULAk"
}







#########RMQ end#####################



###########Service HTTP  healthcheck commands  ##########


#define command{
#        command_name    check_http
#        command_line    $USER1$/check_http -H 52.21.206.170 -p 9090 -u /v1/JobManager/healthcheck/
#}

###########Service HTTP  healthcheck commands End ##########





########### ElaticSearch  Commands ##########


define command{
        command_name    check_elasticsearchMemory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchMemory
        }

define command{
        command_name    check_elasticsearchDisk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchDisk
        }

define command{
        command_name    check_elasticsearchCpu
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchCpu
        }

define command{
        command_name    check_elasticsearchNode1Memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchNode1Memory
        }

define command{
        command_name    check_elasticsearchNode1Disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchNode1Disk
        }

define command{
        command_name    check_elasticsearchNode1Cpu
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_elasticsearchNode1Cpu
        }

define command{
        command_name    check_es_logmgmt_1c-01_memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-01_memory
        }

define command{
        command_name    check_es_logmgmt_1c-01_cpu
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-01_cpu
        }

define command{
        command_name    check_es_logmgmt_1c-01_disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-01_disk
        }

define command{
        command_name    check_es_logmgmt_1c-02_memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-02_memory
        }

define command{
        command_name    check_es_logmgmt_1c-02_disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-02_disk
        }

define command{
        command_name    check_es_logmgmt_1c-02_cpu
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c check_es_logmgmt_1c-02_cpu
        }



########### ElaticSearch  Commands end ##########



########## Stage Agronomy ####



define command{
        command_name    Stage-FarmRiseAgronomy-1b-01-Memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseAgronomy-1b-01-Memory
        }

        define command{
        command_name    Stage-FarmRiseAgronomy-1b-01-Disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseAgronomy-1b-01-Disk
        }

        define command{
        command_name    Stage-FarmRiseAgronomy-1b-01-CPU
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseAgronomy-1b-01-CPU
        }

        define command{
        command_name    Stage-FarmRiseAgronomy-Service-status
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseAgronomy-Service-status
        }

########
########### Stage FarmRise News###############
define command{
        command_name    stage-farmrise-News_memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c stage-farmrise-News_memory
        }

        define command{
        command_name    stage-farmrise-News_disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c stage-farmrise-News_disk
        }

        define command{
        command_name    stage-farmrise-News-CPU
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c stage-farmrise-News-CPU
        }

        define command{
        command_name    stage-farmrise-News_servicestatus
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c stage-farmrise-News_servicestatus
        }
####################


########### Stage FarmRise Event###############
define command{
        command_name    Stage-FarmRiseEvent-1b-01-Memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseEvent-1b-01-Memory
        }

        define command{
        command_name    Stage-FarmRiseEvent-1b-01-Disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseEvent-1b-01-Disk
        }

        define command{
        command_name    Stage-FarmRiseEvent-1b-01-CPU
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseEvent-1b-01-CPU
        }

        define command{
        command_name    Stage-FarmRiseEvent-Service-status
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-FarmRiseEvent-Service-status
        }
########################

############Stage-New-CMS-App###############
define command{
        command_name    Stage-New-CMS-App_Memory
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-New-CMS-App_Memory
        }

        define command{
        command_name    Stage-New-CMS-App_disk
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-New-CMS-App_disk
        }

        define command{
        command_name    Stage-New-CMS-App_CPU
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-New-CMS-App_CPU
        }

        define command{
        command_name    Stage-New-CMS-App_servicestatus
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Stage-New-CMS-App_servicestatus
        }
#################################



 define command{
        command_name    Prod-SystemData-1a-01_servicestatus
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c Prod-SystemData-1a-01_servicestatus
        }


		
		
		
		
		
		
		##################
		##################
		
		
[root@prodnagios etc]# ls
\  cgi.cfg  commands.cfg  htpasswd.users  nagios.cfg  newservices  newservices.zip  objects  resource.cfg  server-config-backup  servers
[root@prodnagios etc]# cat htpasswd.users
nagiosadmin:$apr1$QYpsD9BX$vlOu9Q/n4uinn0BcYsEES0
farmersfirst:$apr1$ncpLElII$V2Rf1uY9BWLHq1aqsA8qr.
[root@prodnagios etc]#


###################






[root@prodnagios etc]# cat nagios.cfg
##############################################################################
#
# NAGIOS.CFG - Sample Main Config File for Nagios 4.2.1
#
# Read the documentation for more information on this configuration
# file.  I've provided some comments here, but things may not be so
# clear without further explanation.
#
#
##############################################################################


# LOG FILE
# This is the main log file where service and host events are logged
# for historical purposes.  This should be the first option specified
# in the config file!!!

log_file=/usr/local/nagios/var/nagios.log
#cfg_dir=/usr/local/nagios/etc/servers



# OBJECT CONFIGURATION FILE(S)
# These are the object configuration files in which you define hosts,
# host groups, contacts, contact groups, services, etc.
# You can split your object definitions across several config files
# if you wish (as shown below), or keep them all in a single config file.

# You can specify individual object config files as shown below:
cfg_file=/usr/local/nagios/etc/objects/commands.cfg
cfg_file=/usr/local/nagios/etc/objects/contacts.cfg
cfg_file=/usr/local/nagios/etc/objects/timeperiods.cfg
cfg_file=/usr/local/nagios/etc/objects/templates.cfg

# Definitions for monitoring the local (Linux) host
cfg_file=/usr/local/nagios/etc/objects/localhost.cfg
cfg_file=/usr/local/nagios/etc/objects/Prod-Cassandra.cfg
cfg_file=/usr/local/nagios/etc/objects/Prod-ServiceCheckUrl.cfg
# Definitions for monitoring a Windows machine
#cfg_file=/usr/local/nagios/etc/objects/windows.cfg

# Definitions for monitoring a router/switch
#cfg_file=/usr/local/nagios/etc/objects/switch.cfg

# Definitions for monitoring a network printer
#cfg_file=/usr/local/nagios/etc/objects/printer.cfg


# You can also tell Nagios to process all config files (with a .cfg
# extension) in a particular directory by using the cfg_dir
# directive as shown below:

cfg_dir=/usr/local/nagios/etc/servers
#cfg_dir=/usr/local/nagios/etc/printers
#cfg_dir=/usr/local/nagios/etc/switches
#cfg_dir=/usr/local/nagios/etc/routers




# OBJECT CACHE FILE
# This option determines where object definitions are cached when
# Nagios starts/restarts.  The CGIs read object definitions from
# this cache file (rather than looking at the object config files
# directly) in order to prevent inconsistencies that can occur
# when the config files are modified after Nagios starts.

object_cache_file=/usr/local/nagios/var/objects.cache



# PRE-CACHED OBJECT FILE
# This options determines the location of the precached object file.
# If you run Nagios with the -p command line option, it will preprocess
# your object configuration file(s) and write the cached config to this
# file.  You can then start Nagios with the -u option to have it read
# object definitions from this precached file, rather than the standard
# object configuration files (see the cfg_file and cfg_dir options above).
# Using a precached object file can speed up the time needed to (re)start
# the Nagios process if you've got a large and/or complex configuration.
# Read the documentation section on optimizing Nagios to find our more
# about how this feature works.

precached_object_file=/usr/local/nagios/var/objects.precache



# RESOURCE FILE
# This is an optional resource file that contains $USERx$ macro
# definitions. Multiple resource files can be specified by using
# multiple resource_file definitions.  The CGIs will not attempt to
# read the contents of resource files, so information that is
# considered to be sensitive (usernames, passwords, etc) can be
# defined as macros in this file and restrictive permissions (600)
# can be placed on this file.

resource_file=/usr/local/nagios/etc/resource.cfg



# STATUS FILE
# This is where the current status of all monitored services and
# hosts is stored.  Its contents are read and processed by the CGIs.
# The contents of the status file are deleted every time Nagios
#  restarts.

status_file=/usr/local/nagios/var/status.dat



# STATUS FILE UPDATE INTERVAL
# This option determines the frequency (in seconds) that
# Nagios will periodically dump program, host, and
# service status data.

status_update_interval=10



# NAGIOS USER
# This determines the effective user that Nagios should run as.
# You can either supply a username or a UID.

nagios_user=nagios



# NAGIOS GROUP
# This determines the effective group that Nagios should run as.
# You can either supply a group name or a GID.

nagios_group=nagios



# EXTERNAL COMMAND OPTION
# This option allows you to specify whether or not Nagios should check
# for external commands (in the command file defined below).  By default
# Nagios will *not* check for external commands, just to be on the
# cautious side.  If you want to be able to use the CGI command interface
# you will have to enable this.
# Values: 0 = disable commands, 1 = enable commands

check_external_commands=1



# EXTERNAL COMMAND FILE
# This is the file that Nagios checks for external command requests.
# It is also where the command CGI will write commands that are submitted
# by users, so it must be writeable by the user that the web server
# is running as (usually 'nobody').  Permissions should be set at the
# directory level instead of on the file, as the file is deleted every
# time its contents are processed.

command_file=/usr/local/nagios/var/rw/nagios.cmd



# QUERY HANDLER INTERFACE
# This is the socket that is created for the Query Handler interface

#query_socket=/usr/local/nagios/var/rw/nagios.qh



# LOCK FILE
# This is the lockfile that Nagios will use to store its PID number
# in when it is running in daemon mode.

lock_file=/usr/local/nagios/var/nagios.lock



# TEMP FILE
# This is a temporary file that is used as scratch space when Nagios
# updates the status log, cleans the comment file, etc.  This file
# is created, used, and deleted throughout the time that Nagios is
# running.

temp_file=/usr/local/nagios/var/nagios.tmp



# TEMP PATH
# This is path where Nagios can create temp files for service and
# host check results, etc.

temp_path=/tmp



# EVENT BROKER OPTIONS
# Controls what (if any) data gets sent to the event broker.
# Values:  0      = Broker nothing
#         -1      = Broker everything
#         <other> = See documentation

event_broker_options=-1



# EVENT BROKER MODULE(S)
# This directive is used to specify an event broker module that should
# by loaded by Nagios at startup.  Use multiple directives if you want
# to load more than one module.  Arguments that should be passed to
# the module at startup are seperated from the module path by a space.
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING !!! WARNING
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Do NOT overwrite modules while they are being used by Nagios or Nagios
# will crash in a fiery display of SEGFAULT glory.  This is a bug/limitation
# either in dlopen(), the kernel, and/or the filesystem.  And maybe Nagios...
#
# The correct/safe way of updating a module is by using one of these methods:
#    1. Shutdown Nagios, replace the module file, restart Nagios
#    2. Delete the original module file, move the new module file into place, restart Nagios
#
# Example:
#
#   broker_module=<modulepath> [moduleargs]

#broker_module=/somewhere/module1.o
#broker_module=/somewhere/module2.o arg1 arg2=3 debug=0



# LOG ROTATION METHOD
# This is the log rotation method that Nagios should use to rotate
# the main log file. Values are as follows..
#       n       = None - don't rotate the log
#       h       = Hourly rotation (top of the hour)
#       d       = Daily rotation (midnight every day)
#       w       = Weekly rotation (midnight on Saturday evening)
#       m       = Monthly rotation (midnight last day of month)

log_rotation_method=d



# LOG ARCHIVE PATH
# This is the directory where archived (rotated) log files should be
# placed (assuming you've chosen to do log rotation).

log_archive_path=/usr/local/nagios/var/archives



# LOGGING OPTIONS
# If you want messages logged to the syslog facility, as well as the
# Nagios log file set this option to 1.  If not, set it to 0.

use_syslog=1



# NOTIFICATION LOGGING OPTION
# If you don't want notifications to be logged, set this value to 0.
# If notifications should be logged, set the value to 1.

log_notifications=1



# SERVICE RETRY LOGGING OPTION
# If you don't want service check retries to be logged, set this value
# to 0.  If retries should be logged, set the value to 1.

log_service_retries=1



# HOST RETRY LOGGING OPTION
# If you don't want host check retries to be logged, set this value to
# 0.  If retries should be logged, set the value to 1.

log_host_retries=1



# EVENT HANDLER LOGGING OPTION
# If you don't want host and service event handlers to be logged, set
# this value to 0.  If event handlers should be logged, set the value
# to 1.

log_event_handlers=1



# INITIAL STATES LOGGING OPTION
# If you want Nagios to log all initial host and service states to
# the main log file (the first time the service or host is checked)
# you can enable this option by setting this value to 1.  If you
# are not using an external application that does long term state
# statistics reporting, you do not need to enable this option.  In
# this case, set the value to 0.

log_initial_states=0



# CURRENT STATES LOGGING OPTION
# If you don't want Nagios to log all current host and service states
# after log has been rotated to the main log file, you can disable this
# option by setting this value to 0. Default value is 1.

log_current_states=1



# EXTERNAL COMMANDS LOGGING OPTION
# If you don't want Nagios to log external commands, set this value
# to 0.  If external commands should be logged, set this value to 1.
# Note: This option does not include logging of passive service
# checks - see the option below for controlling whether or not
# passive checks are logged.

log_external_commands=1



# PASSIVE CHECKS LOGGING OPTION
# If you don't want Nagios to log passive host and service checks, set
# this value to 0.  If passive checks should be logged, set
# this value to 1.

log_passive_checks=1



# GLOBAL HOST AND SERVICE EVENT HANDLERS
# These options allow you to specify a host and service event handler
# command that is to be run for every host or service state change.
# The global event handler is executed immediately prior to the event
# handler that you have optionally specified in each host or
# service definition. The command argument is the short name of a
# command definition that you define in your host configuration file.
# Read the HTML docs for more information.

#global_host_event_handler=somecommand
#global_service_event_handler=somecommand



# SERVICE INTER-CHECK DELAY METHOD
# This is the method that Nagios should use when initially
# "spreading out" service checks when it starts monitoring.  The
# default is to use smart delay calculation, which will try to
# space all service checks out evenly to minimize CPU load.
# Using the dumb setting will cause all checks to be scheduled
# at the same time (with no delay between them)!  This is not a
# good thing for production, but is useful when testing the
# parallelization functionality.
#       n       = None - don't use any delay between checks
#       d       = Use a "dumb" delay of 1 second between checks
#       s       = Use "smart" inter-check delay calculation
#       x.xx    = Use an inter-check delay of x.xx seconds

service_inter_check_delay_method=s



# MAXIMUM SERVICE CHECK SPREAD
# This variable determines the timeframe (in minutes) from the
# program start time that an initial check of all services should
# be completed.  Default is 30 minutes.

max_service_check_spread=30



# SERVICE CHECK INTERLEAVE FACTOR
# This variable determines how service checks are interleaved.
# Interleaving the service checks allows for a more even
# distribution of service checks and reduced load on remote
# hosts.  Setting this value to 1 is equivalent to how versions
# of Nagios previous to 0.0.5 did service checks.  Set this
# value to s (smart) for automatic calculation of the interleave
# factor unless you have a specific reason to change it.
#       s       = Use "smart" interleave factor calculation
#       x       = Use an interleave factor of x, where x is a
#                 number greater than or equal to 1.

service_interleave_factor=s



# HOST INTER-CHECK DELAY METHOD
# This is the method that Nagios should use when initially
# "spreading out" host checks when it starts monitoring.  The
# default is to use smart delay calculation, which will try to
# space all host checks out evenly to minimize CPU load.
# Using the dumb setting will cause all checks to be scheduled
# at the same time (with no delay between them)!
#       n       = None - don't use any delay between checks
#       d       = Use a "dumb" delay of 1 second between checks
#       s       = Use "smart" inter-check delay calculation
#       x.xx    = Use an inter-check delay of x.xx seconds

host_inter_check_delay_method=s



# MAXIMUM HOST CHECK SPREAD
# This variable determines the timeframe (in minutes) from the
# program start time that an initial check of all hosts should
# be completed.  Default is 30 minutes.

max_host_check_spread=30



# MAXIMUM CONCURRENT SERVICE CHECKS
# This option allows you to specify the maximum number of
# service checks that can be run in parallel at any given time.
# Specifying a value of 1 for this variable essentially prevents
# any service checks from being parallelized.  A value of 0
# will not restrict the number of concurrent checks that are
# being executed.

max_concurrent_checks=0



# HOST AND SERVICE CHECK REAPER FREQUENCY
# This is the frequency (in seconds!) that Nagios will process
# the results of host and service checks.

check_result_reaper_frequency=10




# MAX CHECK RESULT REAPER TIME
# This is the max amount of time (in seconds) that  a single
# check result reaper event will be allowed to run before
# returning control back to Nagios so it can perform other
# duties.

max_check_result_reaper_time=30




# CHECK RESULT PATH
# This is directory where Nagios stores the results of host and
# service checks that have not yet been processed.
#
# Note: Make sure that only one instance of Nagios has access
# to this directory!

check_result_path=/usr/local/nagios/var/spool/checkresults




# MAX CHECK RESULT FILE AGE
# This option determines the maximum age (in seconds) which check
# result files are considered to be valid.  Files older than this
# threshold will be mercilessly deleted without further processing.

max_check_result_file_age=3600




# CACHED HOST CHECK HORIZON
# This option determines the maximum amount of time (in seconds)
# that the state of a previous host check is considered current.
# Cached host states (from host checks that were performed more
# recently that the timeframe specified by this value) can immensely
# improve performance in regards to the host check logic.
# Too high of a value for this option may result in inaccurate host
# states being used by Nagios, while a lower value may result in a
# performance hit for host checks.  Use a value of 0 to disable host
# check caching.

cached_host_check_horizon=15



# CACHED SERVICE CHECK HORIZON
# This option determines the maximum amount of time (in seconds)
# that the state of a previous service check is considered current.
# Cached service states (from service checks that were performed more
# recently that the timeframe specified by this value) can immensely
# improve performance in regards to predictive dependency checks.
# Use a value of 0 to disable service check caching.

cached_service_check_horizon=15



# ENABLE PREDICTIVE HOST DEPENDENCY CHECKS
# This option determines whether or not Nagios will attempt to execute
# checks of hosts when it predicts that future dependency logic test
# may be needed.  These predictive checks can help ensure that your
# host dependency logic works well.
# Values:
#  0 = Disable predictive checks
#  1 = Enable predictive checks (default)

enable_predictive_host_dependency_checks=1



# ENABLE PREDICTIVE SERVICE DEPENDENCY CHECKS
# This option determines whether or not Nagios will attempt to execute
# checks of service when it predicts that future dependency logic test
# may be needed.  These predictive checks can help ensure that your
# service dependency logic works well.
# Values:
#  0 = Disable predictive checks
#  1 = Enable predictive checks (default)

enable_predictive_service_dependency_checks=1



# SOFT STATE DEPENDENCIES
# This option determines whether or not Nagios will use soft state
# information when checking host and service dependencies. Normally
# Nagios will only use the latest hard host or service state when
# checking dependencies. If you want it to use the latest state (regardless
# of whether its a soft or hard state type), enable this option.
# Values:
#  0 = Don't use soft state dependencies (default)
#  1 = Use soft state dependencies

soft_state_dependencies=0



# TIME CHANGE ADJUSTMENT THRESHOLDS
# These options determine when Nagios will react to detected changes
# in system time (either forward or backwards).

#time_change_threshold=900



# AUTO-RESCHEDULING OPTION
# This option determines whether or not Nagios will attempt to
# automatically reschedule active host and service checks to
# "smooth" them out over time.  This can help balance the load on
# the monitoring server.
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE
# PERFORMANCE, RATHER THAN INCREASE IT, IF USED IMPROPERLY

auto_reschedule_checks=0



# AUTO-RESCHEDULING INTERVAL
# This option determines how often (in seconds) Nagios will
# attempt to automatically reschedule checks.  This option only
# has an effect if the auto_reschedule_checks option is enabled.
# Default is 30 seconds.
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE
# PERFORMANCE, RATHER THAN INCREASE IT, IF USED IMPROPERLY

auto_rescheduling_interval=30



# AUTO-RESCHEDULING WINDOW
# This option determines the "window" of time (in seconds) that
# Nagios will look at when automatically rescheduling checks.
# Only host and service checks that occur in the next X seconds
# (determined by this variable) will be rescheduled. This option
# only has an effect if the auto_reschedule_checks option is
# enabled.  Default is 180 seconds (3 minutes).
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE
# PERFORMANCE, RATHER THAN INCREASE IT, IF USED IMPROPERLY

auto_rescheduling_window=180



# TIMEOUT VALUES
# These options control how much time Nagios will allow various
# types of commands to execute before killing them off.  Options
# are available for controlling maximum time allotted for
# service checks, host checks, event handlers, notifications, the
# ocsp command, and performance data commands.  All values are in
# seconds.

service_check_timeout=60
host_check_timeout=30
event_handler_timeout=30
notification_timeout=30
ocsp_timeout=5
perfdata_timeout=5



# RETAIN STATE INFORMATION
# This setting determines whether or not Nagios will save state
# information for services and hosts before it shuts down.  Upon
# startup Nagios will reload all saved service and host state
# information before starting to monitor.  This is useful for
# maintaining long-term data on state statistics, etc, but will
# slow Nagios down a bit when it (re)starts.  Since its only
# a one-time penalty, I think its well worth the additional
# startup delay.

retain_state_information=1



# STATE RETENTION FILE
# This is the file that Nagios should use to store host and
# service state information before it shuts down.  The state
# information in this file is also read immediately prior to
# starting to monitor the network when Nagios is restarted.
# This file is used only if the retain_state_information
# variable is set to 1.

state_retention_file=/usr/local/nagios/var/retention.dat



# RETENTION DATA UPDATE INTERVAL
# This setting determines how often (in minutes) that Nagios
# will automatically save retention data during normal operation.
# If you set this value to 0, Nagios will not save retention
# data at regular interval, but it will still save retention
# data before shutting down or restarting.  If you have disabled
# state retention, this option has no effect.

retention_update_interval=60



# USE RETAINED PROGRAM STATE
# This setting determines whether or not Nagios will set
# program status variables based on the values saved in the
# retention file.  If you want to use retained program status
# information, set this value to 1.  If not, set this value
# to 0.

use_retained_program_state=1



# USE RETAINED SCHEDULING INFO
# This setting determines whether or not Nagios will retain
# the scheduling info (next check time) for hosts and services
# based on the values saved in the retention file.  If you
# If you want to use retained scheduling info, set this
# value to 1.  If not, set this value to 0.

use_retained_scheduling_info=1



# RETAINED ATTRIBUTE MASKS (ADVANCED FEATURE)
# The following variables are used to specify specific host and
# service attributes that should *not* be retained by Nagios during
# program restarts.
#
# The values of the masks are bitwise ANDs of values specified
# by the "MODATTR_" definitions found in include/common.h.
# For example, if you do not want the current enabled/disabled state
# of flap detection and event handlers for hosts to be retained, you
# would use a value of 24 for the host attribute mask...
# MODATTR_EVENT_HANDLER_ENABLED (8) + MODATTR_FLAP_DETECTION_ENABLED (16) = 24

# This mask determines what host attributes are not retained
retained_host_attribute_mask=0

# This mask determines what service attributes are not retained
retained_service_attribute_mask=0

# These two masks determine what process attributes are not retained.
# There are two masks, because some process attributes have host and service
# options.  For example, you can disable active host checks, but leave active
# service checks enabled.
retained_process_host_attribute_mask=0
retained_process_service_attribute_mask=0

# These two masks determine what contact attributes are not retained.
# There are two masks, because some contact attributes have host and
# service options.  For example, you can disable host notifications for
# a contact, but leave service notifications enabled for them.
retained_contact_host_attribute_mask=0
retained_contact_service_attribute_mask=0



# INTERVAL LENGTH
# This is the seconds per unit interval as used in the
# host/contact/service configuration files.  Setting this to 60 means
# that each interval is one minute long (60 seconds).  Other settings
# have not been tested much, so your mileage is likely to vary...

interval_length=60



# CHECK FOR UPDATES
# This option determines whether Nagios will automatically check to
# see if new updates (releases) are available.  It is recommend that you
# enable this option to ensure that you stay on top of the latest critical
# patches to Nagios.  Nagios is critical to you - make sure you keep it in
# good shape.  Nagios will check once a day for new updates. Data collected
# by Nagios Enterprises from the update check is processed in accordance
# with our privacy policy - see https://api.nagios.org for details.

check_for_updates=1



# BARE UPDATE CHECK
# This option deterines what data Nagios will send to api.nagios.org when
# it checks for updates.  By default, Nagios will send information on the
# current version of Nagios you have installed, as well as an indicator as
# to whether this was a new installation or not.  Nagios Enterprises uses
# this data to determine the number of users running specific version of
# Nagios.  Enable this option if you do not want this information to be sent.

bare_update_check=0



# AGGRESSIVE HOST CHECKING OPTION
# If you don't want to turn on aggressive host checking features, set
# this value to 0 (the default).  Otherwise set this value to 1 to
# enable the aggressive check option.  Read the docs for more info
# on what aggressive host check is or check out the source code in
# base/checks.c

use_aggressive_host_checking=0



# SERVICE CHECK EXECUTION OPTION
# This determines whether or not Nagios will actively execute
# service checks when it initially starts.  If this option is
# disabled, checks are not actively made, but Nagios can still
# receive and process passive check results that come in.  Unless
# you're implementing redundant hosts or have a special need for
# disabling the execution of service checks, leave this enabled!
# Values: 1 = enable checks, 0 = disable checks

execute_service_checks=1



# PASSIVE SERVICE CHECK ACCEPTANCE OPTION
# This determines whether or not Nagios will accept passive
# service checks results when it initially (re)starts.
# Values: 1 = accept passive checks, 0 = reject passive checks

accept_passive_service_checks=1



# HOST CHECK EXECUTION OPTION
# This determines whether or not Nagios will actively execute
# host checks when it initially starts.  If this option is
# disabled, checks are not actively made, but Nagios can still
# receive and process passive check results that come in.  Unless
# you're implementing redundant hosts or have a special need for
# disabling the execution of host checks, leave this enabled!
# Values: 1 = enable checks, 0 = disable checks

execute_host_checks=1



# PASSIVE HOST CHECK ACCEPTANCE OPTION
# This determines whether or not Nagios will accept passive
# host checks results when it initially (re)starts.
# Values: 1 = accept passive checks, 0 = reject passive checks

accept_passive_host_checks=1



# NOTIFICATIONS OPTION
# This determines whether or not Nagios will sent out any host or
# service notifications when it is initially (re)started.
# Values: 1 = enable notifications, 0 = disable notifications

enable_notifications=1



# EVENT HANDLER USE OPTION
# This determines whether or not Nagios will run any host or
# service event handlers when it is initially (re)started.  Unless
# you're implementing redundant hosts, leave this option enabled.
# Values: 1 = enable event handlers, 0 = disable event handlers

enable_event_handlers=1



# PROCESS PERFORMANCE DATA OPTION
# This determines whether or not Nagios will process performance
# data returned from service and host checks.  If this option is
# enabled, host performance data will be processed using the
# host_perfdata_command (defined below) and service performance
# data will be processed using the service_perfdata_command (also
# defined below).  Read the HTML docs for more information on
# performance data.
# Values: 1 = process performance data, 0 = do not process performance data

process_performance_data=0



# HOST AND SERVICE PERFORMANCE DATA PROCESSING COMMANDS
# These commands are run after every host and service check is
# performed.  These commands are executed only if the
# enable_performance_data option (above) is set to 1.  The command
# argument is the short name of a command definition that you
# define in your host configuration file.  Read the HTML docs for
# more information on performance data.

#host_perfdata_command=process-host-perfdata
#service_perfdata_command=process-service-perfdata



# HOST AND SERVICE PERFORMANCE DATA FILES
# These files are used to store host and service performance data.
# Performance data is only written to these files if the
# enable_performance_data option (above) is set to 1.

#host_perfdata_file=/usr/local/nagios/var/host-perfdata
#service_perfdata_file=/usr/local/nagios/var/service-perfdata



# HOST AND SERVICE PERFORMANCE DATA FILE TEMPLATES
# These options determine what data is written (and how) to the
# performance data files.  The templates may contain macros, special
# characters (\t for tab, \r for carriage return, \n for newline)
# and plain text.  A newline is automatically added after each write
# to the performance data file.  Some examples of what you can do are
# shown below.

#host_perfdata_file_template=[HOSTPERFDATA]\t$TIMET$\t$HOSTNAME$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$
#service_perfdata_file_template=[SERVICEPERFDATA]\t$TIMET$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$



# HOST AND SERVICE PERFORMANCE DATA FILE MODES
# This option determines whether or not the host and service
# performance data files are opened in write ("w") or append ("a")
# mode. If you want to use named pipes, you should use the special
# pipe ("p") mode which avoid blocking at startup, otherwise you will
# likely want the defult append ("a") mode.

#host_perfdata_file_mode=a
#service_perfdata_file_mode=a



# HOST AND SERVICE PERFORMANCE DATA FILE PROCESSING INTERVAL
# These options determine how often (in seconds) the host and service
# performance data files are processed using the commands defined
# below.  A value of 0 indicates the files should not be periodically
# processed.

#host_perfdata_file_processing_interval=0
#service_perfdata_file_processing_interval=0



# HOST AND SERVICE PERFORMANCE DATA FILE PROCESSING COMMANDS
# These commands are used to periodically process the host and
# service performance data files.  The interval at which the
# processing occurs is determined by the options above.

#host_perfdata_file_processing_command=process-host-perfdata-file
#service_perfdata_file_processing_command=process-service-perfdata-file



# HOST AND SERVICE PERFORMANCE DATA PROCESS EMPTY RESULTS
# These options determine wether the core will process empty perfdata
# results or not. This is needed for distributed monitoring, and intentionally
# turned on by default.
# If you don't require empty perfdata - saving some cpu cycles
# on unwanted macro calculation - you can turn that off. Be careful!
# Values: 1 = enable, 0 = disable

#host_perfdata_process_empty_results=1
#service_perfdata_process_empty_results=1


# OBSESS OVER SERVICE CHECKS OPTION
# This determines whether or not Nagios will obsess over service
# checks and run the ocsp_command defined below.  Unless you're
# planning on implementing distributed monitoring, do not enable
# this option.  Read the HTML docs for more information on
# implementing distributed monitoring.
# Values: 1 = obsess over services, 0 = do not obsess (default)

obsess_over_services=0



# OBSESSIVE COMPULSIVE SERVICE PROCESSOR COMMAND
# This is the command that is run for every service check that is
# processed by Nagios.  This command is executed only if the
# obsess_over_services option (above) is set to 1.  The command
# argument is the short name of a command definition that you
# define in your host configuration file. Read the HTML docs for
# more information on implementing distributed monitoring.

#ocsp_command=somecommand



# OBSESS OVER HOST CHECKS OPTION
# This determines whether or not Nagios will obsess over host
# checks and run the ochp_command defined below.  Unless you're
# planning on implementing distributed monitoring, do not enable
# this option.  Read the HTML docs for more information on
# implementing distributed monitoring.
# Values: 1 = obsess over hosts, 0 = do not obsess (default)

obsess_over_hosts=0



# OBSESSIVE COMPULSIVE HOST PROCESSOR COMMAND
# This is the command that is run for every host check that is
# processed by Nagios.  This command is executed only if the
# obsess_over_hosts option (above) is set to 1.  The command
# argument is the short name of a command definition that you
# define in your host configuration file. Read the HTML docs for
# more information on implementing distributed monitoring.

#ochp_command=somecommand



# TRANSLATE PASSIVE HOST CHECKS OPTION
# This determines whether or not Nagios will translate
# DOWN/UNREACHABLE passive host check results into their proper
# state for this instance of Nagios.  This option is useful
# if you have distributed or failover monitoring setup.  In
# these cases your other Nagios servers probably have a different
# "view" of the network, with regards to the parent/child relationship
# of hosts.  If a distributed monitoring server thinks a host
# is DOWN, it may actually be UNREACHABLE from the point of
# this Nagios instance.  Enabling this option will tell Nagios
# to translate any DOWN or UNREACHABLE host states it receives
# passively into the correct state from the view of this server.
# Values: 1 = perform translation, 0 = do not translate (default)

translate_passive_host_checks=0



# PASSIVE HOST CHECKS ARE SOFT OPTION
# This determines whether or not Nagios will treat passive host
# checks as being HARD or SOFT.  By default, a passive host check
# result will put a host into a HARD state type.  This can be changed
# by enabling this option.
# Values: 0 = passive checks are HARD, 1 = passive checks are SOFT

passive_host_checks_are_soft=0



# ORPHANED HOST/SERVICE CHECK OPTIONS
# These options determine whether or not Nagios will periodically
# check for orphaned host service checks.  Since service checks are
# not rescheduled until the results of their previous execution
# instance are processed, there exists a possibility that some
# checks may never get rescheduled.  A similar situation exists for
# host checks, although the exact scheduling details differ a bit
# from service checks.  Orphaned checks seem to be a rare
# problem and should not happen under normal circumstances.
# If you have problems with service checks never getting
# rescheduled, make sure you have orphaned service checks enabled.
# Values: 1 = enable checks, 0 = disable checks

check_for_orphaned_services=1
check_for_orphaned_hosts=1



# SERVICE FRESHNESS CHECK OPTION
# This option determines whether or not Nagios will periodically
# check the "freshness" of service results.  Enabling this option
# is useful for ensuring passive checks are received in a timely
# manner.
# Values: 1 = enabled freshness checking, 0 = disable freshness checking

check_service_freshness=1



# SERVICE FRESHNESS CHECK INTERVAL
# This setting determines how often (in seconds) Nagios will
# check the "freshness" of service check results.  If you have
# disabled service freshness checking, this option has no effect.

service_freshness_check_interval=60



# SERVICE CHECK TIMEOUT STATE
# This setting determines the state Nagios will report when a
# service check times out - that is does not respond within
# service_check_timeout seconds.  This can be useful if a
# machine is running at too high a load and you do not want
# to consider a failed service check to be critical (the default).
# Valid settings are:
# c - Critical (default)
# u - Unknown
# w - Warning
# o - OK

service_check_timeout_state=c



# HOST FRESHNESS CHECK OPTION
# This option determines whether or not Nagios will periodically
# check the "freshness" of host results.  Enabling this option
# is useful for ensuring passive checks are received in a timely
# manner.
# Values: 1 = enabled freshness checking, 0 = disable freshness checking

check_host_freshness=0



# HOST FRESHNESS CHECK INTERVAL
# This setting determines how often (in seconds) Nagios will
# check the "freshness" of host check results.  If you have
# disabled host freshness checking, this option has no effect.

host_freshness_check_interval=60




# ADDITIONAL FRESHNESS THRESHOLD LATENCY
# This setting determines the number of seconds that Nagios
# will add to any host and service freshness thresholds that
# it calculates (those not explicitly specified by the user).

additional_freshness_latency=15




# FLAP DETECTION OPTION
# This option determines whether or not Nagios will try
# and detect hosts and services that are "flapping".
# Flapping occurs when a host or service changes between
# states too frequently.  When Nagios detects that a
# host or service is flapping, it will temporarily suppress
# notifications for that host/service until it stops
# flapping.  Flap detection is very experimental, so read
# the HTML documentation before enabling this feature!
# Values: 1 = enable flap detection
#         0 = disable flap detection (default)

enable_flap_detection=1



# FLAP DETECTION THRESHOLDS FOR HOSTS AND SERVICES
# Read the HTML documentation on flap detection for
# an explanation of what this option does.  This option
# has no effect if flap detection is disabled.

low_service_flap_threshold=5.0
high_service_flap_threshold=20.0
low_host_flap_threshold=5.0
high_host_flap_threshold=20.0



# DATE FORMAT OPTION
# This option determines how short dates are displayed. Valid options
# include:
#       us              (MM-DD-YYYY HH:MM:SS)
#       euro            (DD-MM-YYYY HH:MM:SS)
#       iso8601         (YYYY-MM-DD HH:MM:SS)
#       strict-iso8601  (YYYY-MM-DDTHH:MM:SS)
#

date_format=us




# TIMEZONE OFFSET
# This option is used to override the default timezone that this
# instance of Nagios runs in.  If not specified, Nagios will use
# the system configured timezone.
#
# NOTE: In order to display the correct timezone in the CGIs, you
# will also need to alter the Apache directives for the CGI path
# to include your timezone.  Example:
#
#   <Directory "/usr/local/nagios/sbin/">
#      SetEnv TZ "Australia/Brisbane"
#      ...
#   </Directory>

#use_timezone=US/Mountain
#use_timezone=Australia/Brisbane



# ILLEGAL OBJECT NAME CHARACTERS
# This option allows you to specify illegal characters that cannot
# be used in host names, service descriptions, or names of other
# object types.

illegal_object_name_chars=`~!$%^&*|'"<>?,()=



# ILLEGAL MACRO OUTPUT CHARACTERS
# This option allows you to specify illegal characters that are
# stripped from macros before being used in notifications, event
# handlers, etc.  This DOES NOT affect macros used in service or
# host check commands.
# The following macros are stripped of the characters you specify:
#       $HOSTOUTPUT$
#       $LONGHOSTOUTPUT$
#       $HOSTPERFDATA$
#       $HOSTACKAUTHOR$
#       $HOSTACKCOMMENT$
#       $SERVICEOUTPUT$
#       $LONGSERVICEOUTPUT$
#       $SERVICEPERFDATA$
#       $SERVICEACKAUTHOR$
#       $SERVICEACKCOMMENT$

illegal_macro_output_chars=`~$&|'"<>



# REGULAR EXPRESSION MATCHING
# This option controls whether or not regular expression matching
# takes place in the object config files.  Regular expression
# matching is used to match host, hostgroup, service, and service
# group names/descriptions in some fields of various object types.
# Values: 1 = enable regexp matching, 0 = disable regexp matching

use_regexp_matching=0



# "TRUE" REGULAR EXPRESSION MATCHING
# This option controls whether or not "true" regular expression
# matching takes place in the object config files.  This option
# only has an effect if regular expression matching is enabled
# (see above).  If this option is DISABLED, regular expression
# matching only occurs if a string contains wildcard characters
# (* and ?).  If the option is ENABLED, regexp matching occurs
# all the time (which can be annoying).
# Values: 1 = enable true matching, 0 = disable true matching

use_true_regexp_matching=0



# ADMINISTRATOR EMAIL/PAGER ADDRESSES
# The email and pager address of a global administrator (likely you).
# Nagios never uses these values itself, but you can access them by
# using the $ADMINEMAIL$ and $ADMINPAGER$ macros in your notification
# commands.

admin_email=nagios@localhost
admin_pager=pagenagios@localhost



# DAEMON CORE DUMP OPTION
# This option determines whether or not Nagios is allowed to create
# a core dump when it runs as a daemon.  Note that it is generally
# considered bad form to allow this, but it may be useful for
# debugging purposes.  Enabling this option doesn't guarantee that
# a core file will be produced, but that's just life...
# Values: 1 - Allow core dumps
#         0 - Do not allow core dumps (default)

daemon_dumps_core=0



# LARGE INSTALLATION TWEAKS OPTION
# This option determines whether or not Nagios will take some shortcuts
# which can save on memory and CPU usage in large Nagios installations.
# Read the documentation for more information on the benefits/tradeoffs
# of enabling this option.
# Values: 1 - Enabled tweaks
#         0 - Disable tweaks (default)

use_large_installation_tweaks=0



# ENABLE ENVIRONMENT MACROS
# This option determines whether or not Nagios will make all standard
# macros available as environment variables when host/service checks
# and system commands (event handlers, notifications, etc.) are
# executed.
# Enabling this is a very bad idea for anything but very small setups,
# as it means plugins, notification scripts and eventhandlers may run
# out of environment space. It will also cause a significant increase
# in CPU- and memory usage and drastically reduce the number of checks
# you can run.
# Values: 1 - Enable environment variable macros
#         0 - Disable environment variable macros (default)

enable_environment_macros=0



# CHILD PROCESS MEMORY OPTION
# This option determines whether or not Nagios will free memory in
# child processes (processed used to execute system commands and host/
# service checks).  If you specify a value here, it will override
# program defaults.
# Value: 1 - Free memory in child processes
#        0 - Do not free memory in child processes

#free_child_process_memory=1



# CHILD PROCESS FORKING BEHAVIOR
# This option determines how Nagios will fork child processes
# (used to execute system commands and host/service checks).  Normally
# child processes are fork()ed twice, which provides a very high level
# of isolation from problems.  Fork()ing once is probably enough and will
# save a great deal on CPU usage (in large installs), so you might
# want to consider using this.  If you specify a value here, it will
# program defaults.
# Value: 1 - Child processes fork() twice
#        0 - Child processes fork() just once

#child_processes_fork_twice=1



# DEBUG LEVEL
# This option determines how much (if any) debugging information will
# be written to the debug file.  OR values together to log multiple
# types of information.
# Values:
#          -1 = Everything
#          0 = Nothing
#          1 = Functions
#          2 = Configuration
#          4 = Process information
#          8 = Scheduled events
#          16 = Host/service checks
#          32 = Notifications
#          64 = Event broker
#          128 = External commands
#          256 = Commands
#          512 = Scheduled downtime
#          1024 = Comments
#          2048 = Macros

debug_level=0



# DEBUG VERBOSITY
# This option determines how verbose the debug log out will be.
# Values: 0 = Brief output
#         1 = More detailed
#         2 = Very detailed

debug_verbosity=1



# DEBUG FILE
# This option determines where Nagios should write debugging information.

debug_file=/usr/local/nagios/var/nagios.debug



# MAX DEBUG FILE SIZE
# This option determines the maximum size (in bytes) of the debug file.  If
# the file grows larger than this size, it will be renamed with a .old
# extension.  If a file already exists with a .old extension it will
# automatically be deleted.  This helps ensure your disk space usage doesn't
# get out of control when debugging Nagios.

max_debug_file_size=1000000



# Should we allow hostgroups to have no hosts, we default this to off since
# that was the old behavior

allow_empty_hostgroup_assignment=0



# Normally worker count is dynamically allocated based on 1.5 * number of cpu's
# with a minimum of 4 workers.  This value will override the defaults

#check_workers=3



# DISABLE SERVICE CHECKS WHEN HOST DOWN
# This option will disable all service checks if the host is not in an UP state
#
# While desirable in some environments, enabling this value can distort report
# values as the expected quantity of checks will not have been performed

#host_down_disable_service_checks=0



# EXPERIMENTAL load controlling options
# To get current defaults based on your system issue a command to
# the query handler. Please note that this is an experimental feature
# and not meant for production use. Used incorrectly it can induce
# enormous latency.
# #core loadctl
#   jobs_max - The maximum amount of jobs to run at one time
#   jobs_min - The minimum amount of jobs to run at one time
#   jobs_limit - The maximum amount of jobs the current load lets us run
#   backoff_limit - The minimum backoff_change
#   backoff_change - # of jobs to remove from jobs_limit when backing off
#   rampup_limit - Minimum rampup_change
#   rampup_change - # of jobs to add to jobs_limit when ramping up
# NOTE: The backoff_limit and rampup_limit are NOT used by anything currently,
#       so if your system is under load nothing will actively modify the jobs
#       even if you have these options enabled, they are for external
#       connector information only.  However, if you change the jobs_max or
#       jobs_min manually here or through the query handler interface that
#       WILL affect your system
#loadctl_options=jobs_max=100;backoff_limit=10;rampup_change=5
[root@prodnagios etc]#





###################		







[root@prodnagios objects]# cat switch.cfg
###############################################################################
# SWITCH.CFG - SAMPLE CONFIG FILE FOR MONITORING A SWITCH
#
#
# NOTES: This config file assumes that you are using the sample configuration
#        files that get installed with the Nagios quickstart guide.
#
###############################################################################




###############################################################################
###############################################################################
#
# HOST DEFINITIONS
#
###############################################################################
###############################################################################

# Define the switch that we'll be monitoring

define host{
        use             generic-switch          ; Inherit default values from a template
        host_name       linksys-srw224p         ; The name we're giving to this switch
        alias           Linksys SRW224P Switch  ; A longer name associated with the switch
        address         192.168.1.253           ; IP address of the switch
        hostgroups      switches                ; Host groups this switch is associated with
        }




###############################################################################
###############################################################################
#
# HOST GROUP DEFINITIONS
#
###############################################################################
###############################################################################

# Create a new hostgroup for switches

define hostgroup{
        hostgroup_name  switches                ; The name of the hostgroup
        alias           Network Switches        ; Long name of the group
        }




###############################################################################
###############################################################################
#
# SERVICE DEFINITIONS
#
###############################################################################
###############################################################################

# Create a service to PING to switch

define service{
        use                     generic-service ; Inherit values from a template
        host_name               linksys-srw224p ; The name of the host the service is associated with
        service_description     PING            ; The service description
        check_command           check_ping!200.0,20%!600.0,60%  ; The command used to monitor the service
        normal_check_interval   5               ; Check the service every 5 minutes under normal conditions
        retry_check_interval    1               ; Re-check the service every minute until its final/hard state is determined
        }


# Monitor uptime via SNMP

define service{
        use                     generic-service ; Inherit values from a template
        host_name               linksys-srw224p
        service_description     Uptime
        check_command           check_snmp!-C public -o sysUpTime.0
        }



# Monitor Port 1 status via SNMP

define service{
        use                     generic-service ; Inherit values from a template
        host_name               linksys-srw224p
        service_description     Port 1 Link Status
        check_command           check_snmp!-C public -o ifOperStatus.1 -r 1 -m RFC1213-MIB
        }



# Monitor bandwidth via MRTG logs

define service{
        use                     generic-service ; Inherit values from a template
        host_name               linksys-srw224p
        service_description     Port 1 Bandwidth Usage
        check_command           check_local_mrtgtraf!/var/lib/mrtg/192.168.1.253_1.log!AVG!1000000,1000000!5000000,5000000!10
        }












		
		
		##########
		
	    ##########
		
		
		
		[root@prodnagios objects]# cat contacts.cfg
###############################################################################
# CONTACTS.CFG - SAMPLE CONTACT/CONTACTGROUP DEFINITIONS
#
#
# NOTES: This config file provides you with some example contact and contact
#        group definitions that you can reference in host and service
#        definitions.
#
#        You don't need to keep these definitions in a separate file from your
#        other object definitions.  This has been done just to make things
#        easier to understand.
#
###############################################################################



###############################################################################
###############################################################################
#
# CONTACTS
#
###############################################################################
###############################################################################

# Just one contact defined by default - the Nagios admin (that's you)
# This contact definition inherits a lot of default values from the 'generic-contact'
# template which is defined elsewhere.

define contact{
        contact_name                    nagiosadmin             ; Short name of user
        use                             generic-contact         ; Inherit default values from generic-contact template (defined above)
        alias                           Nagios Admin            ; Full name of user

        email                           ff_devops@yash.com      ; <<***** CHANGE THIS TO YOUR EMAIL ADDRESS ******
        }



###############################################################################
###############################################################################
#
# CONTACT GROUPS
#
###############################################################################
###############################################################################

# We only have one contact in this simple configuration file, so there is
# no need to create more than one contact group.

define contactgroup{
        contactgroup_name       admins
        alias                   Nagios Administrators
        members                 nagiosadmin
        }

		
		
		
		
		
		#####################
		#####################
		
		
		
		[root@prodnagios nagios]# cat /etc/httpd/conf.d/nagios.conf
# SAMPLE CONFIG SNIPPETS FOR APACHE WEB SERVER
#
# This file contains examples of entries that need
# to be incorporated into your Apache web server
# configuration file.  Customize the paths, etc. as
# needed to fit your system.

ScriptAlias /nagios/cgi-bin "/usr/local/nagios/sbin"

<Directory "/usr/local/nagios/sbin">
  #SSLRequireSSL
   Options ExecCGI
   AllowOverride None
   <IfVersion >= 2.3>
      <RequireAll>
         Require all granted
#        Require host 127.0.0.1

         AuthName "Nagios Access"
         AuthType Basic
         AuthUserFile /usr/local/nagios/etc/htpasswd.users
         Require valid-user
      </RequireAll>
   </IfVersion>
   <IfVersion < 2.3>
      Order allow,deny
      Allow from all
#     Order deny,allow
#     Deny from all
#     Allow from 127.0.0.1

      AuthName "Nagios Access"
      AuthType Basic
      AuthUserFile /usr/local/nagios/etc/htpasswd.users
      Require valid-user
   </IfVersion>
</Directory>

Alias /nagios "/usr/local/nagios/share"

<Directory "/usr/local/nagios/share">
  #SSLRequireSSL
   Options None
   AllowOverride None
   <IfVersion >= 2.3>
      <RequireAll>
         Require all granted
#        Require host 127.0.0.1

         AuthName "Nagios Access"
         AuthType Basic
         AuthUserFile /usr/local/nagios/etc/htpasswd.users
         Require valid-user
      </RequireAll>
   </IfVersion>
   <IfVersion < 2.3>
      Order allow,deny
      Allow from all
#     Order deny,allow
#     Deny from all
#     Allow from 127.0.0.1

      AuthName "Nagios Access"
      AuthType Basic
      AuthUserFile /usr/local/nagios/etc/htpasswd.users
      Require valid-user
   </IfVersion>
</Directory>

#########################################
#########################################



[root@prodnagios nagios]# cat /etc/httpd/conf/httpd.conf
#
# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See <URL:http://httpd.apache.org/docs/2.2/> for detailed information.
# In particular, see
# <URL:http://httpd.apache.org/docs/2.2/mod/directives.html>
# for a discussion of each configuration directive.
#
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.
#
# The configuration directives are grouped into three basic sections:
#  1. Directives that control the operation of the Apache server process as a
#     whole (the 'global environment').
#  2. Directives that define the parameters of the 'main' or 'default' server,
#     which responds to requests that aren't handled by a virtual host.
#     These directives also provide default values for the settings
#     of all virtual hosts.
#  3. Settings for virtual hosts, which allow Web requests to be sent to
#     different IP addresses or hostnames and have them handled by the
#     same Apache server process.
#
# Configuration and logfile names: If the filenames you specify for many
# of the server's control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so "logs/foo.log"
# with ServerRoot set to "/etc/httpd" will be interpreted by the
# server as "/etc/httpd/logs/foo.log".
#

### Section 1: Global Environment
#
# The directives in this section affect the overall operation of Apache,
# such as the number of concurrent requests it can handle or where it
# can find its configuration files.
#

#
# Don't give away too much information about all the subcomponents
# we are running.  Comment out this line if you don't mind remote sites
# finding out what major optional modules you are running
ServerTokens OS

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the LockFile documentation
# (available at <URL:http://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
ServerRoot "/etc/httpd"

#
# PidFile: The file in which the server should record its process
# identification number when it starts.  Note the PIDFILE variable in
# /etc/sysconfig/httpd must be set appropriately if this location is
# changed.
#
PidFile run/httpd.pid

#
# Timeout: The number of seconds before receives and sends time out.
#
Timeout 60

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive Off

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
KeepAliveTimeout 15

##
## Server-Pool Size Regulation (MPM specific)
##

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# ServerLimit: maximum value for MaxClients for the lifetime of the server
# MaxClients: maximum number of server processes allowed to start
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule prefork.c>
StartServers       8
MinSpareServers    5
MaxSpareServers   20
ServerLimit      256
MaxClients       256
MaxRequestsPerChild  4000
</IfModule>

# worker MPM
# StartServers: initial number of server processes to start
# MaxClients: maximum number of simultaneous client connections
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadsPerChild: constant number of worker threads in each server process
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule worker.c>
StartServers         4
MaxClients         300
MinSpareThreads     25
MaxSpareThreads     75
ThreadsPerChild     25
MaxRequestsPerChild  0
</IfModule>

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, in addition to the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to
# prevent Apache from glomming onto all bound IP addresses (0.0.0.0)
#
#Listen 12.34.56.78:80
Listen 80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule auth_digest_module modules/mod_auth_digest.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_alias_module modules/mod_authn_alias.so
LoadModule authn_anon_module modules/mod_authn_anon.so
LoadModule authn_dbm_module modules/mod_authn_dbm.so
LoadModule authn_default_module modules/mod_authn_default.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_owner_module modules/mod_authz_owner.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_dbm_module modules/mod_authz_dbm.so
LoadModule authz_default_module modules/mod_authz_default.so
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
LoadModule include_module modules/mod_include.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule logio_module modules/mod_logio.so
LoadModule env_module modules/mod_env.so
LoadModule ext_filter_module modules/mod_ext_filter.so
LoadModule mime_magic_module modules/mod_mime_magic.so
LoadModule expires_module modules/mod_expires.so
LoadModule deflate_module modules/mod_deflate.so
LoadModule headers_module modules/mod_headers.so
LoadModule usertrack_module modules/mod_usertrack.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule mime_module modules/mod_mime.so
LoadModule dav_module modules/mod_dav.so
LoadModule status_module modules/mod_status.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule info_module modules/mod_info.so
LoadModule dav_fs_module modules/mod_dav_fs.so
LoadModule vhost_alias_module modules/mod_vhost_alias.so
LoadModule negotiation_module modules/mod_negotiation.so
LoadModule dir_module modules/mod_dir.so
LoadModule actions_module modules/mod_actions.so
LoadModule speling_module modules/mod_speling.so
LoadModule userdir_module modules/mod_userdir.so
LoadModule alias_module modules/mod_alias.so
LoadModule substitute_module modules/mod_substitute.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule cache_module modules/mod_cache.so
LoadModule suexec_module modules/mod_suexec.so
LoadModule disk_cache_module modules/mod_disk_cache.so
LoadModule cgi_module modules/mod_cgi.so
LoadModule version_module modules/mod_version.so

#
# The following modules are not loaded by default:
#
#LoadModule asis_module modules/mod_asis.so
#LoadModule authn_dbd_module modules/mod_authn_dbd.so
#LoadModule cern_meta_module modules/mod_cern_meta.so
#LoadModule cgid_module modules/mod_cgid.so
#LoadModule dbd_module modules/mod_dbd.so
#LoadModule dumpio_module modules/mod_dumpio.so
#LoadModule filter_module modules/mod_filter.so
#LoadModule ident_module modules/mod_ident.so
#LoadModule log_forensic_module modules/mod_log_forensic.so
#LoadModule unique_id_module modules/mod_unique_id.so
#LoadModule file_cache_module modules/mod_file_cache.so
#

#
# Load config files from the config directory "/etc/httpd/conf.d".
#
Include conf.d/*.conf

#
# ExtendedStatus controls whether Apache will generate "full" status
# information (ExtendedStatus On) or just basic information (ExtendedStatus
# Off) when the "server-status" handler is called. The default is Off.
#
#ExtendedStatus On

#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.
#
# User/Group: The name (or #number) of the user/group to run httpd as.
#  . On SCO (ODT 3) use "User nouser" and "Group nogroup".
#  . On HPUX you may not be able to use shared memory as nobody, and the
#    suggested workaround is to create a user www and use that user.
#  NOTE that some kernels refuse to setgid(Group) or semctl(IPC_SET)
#  when the value of (unsigned)Group is above 60000;
#  don't use Group #-1 on these systems!
#
User apache
Group apache

### Section 2: 'Main' server configuration
#
# The directives in this section set up the values used by the 'main'
# server, which responds to any requests that aren't handled by a
# <VirtualHost> definition.  These values also provide defaults for
# any <VirtualHost> containers you may define later in the file.
#
# All of these directives may appear inside <VirtualHost> containers,
# in which case these default settings will be overridden for the
# virtual host being defined.
#

#
# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.  e.g. admin@your-domain.com
#
ServerAdmin root@localhost

#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If this is not set to valid DNS name for your host, server-generated
# redirections will not work.  See also the UseCanonicalName directive.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
# You will have to access it by its address anyway, and this will make
# redirections work in a sensible way.
#
#ServerName www.example.com:80

#
# UseCanonicalName: Determines how Apache constructs self-referencing
# URLs and the SERVER_NAME and SERVER_PORT variables.
# When set "Off", Apache will use the Hostname and Port supplied
# by the client.  When set "On", Apache will use the value of the
# ServerName directive.
#
UseCanonicalName Off

#
# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
DocumentRoot "/var/www/html"

#
# Each directory to which Apache has access can be configured with respect
# to which services and features are allowed and/or disabled in that
# directory (and its subdirectories).
#
# First, we configure the "default" to be a very restrictive set of
# features.
#
<Directory />
    Options FollowSymLinks
    AllowOverride None
</Directory>

#
# Note that from this point forward you must specifically allow
# particular features to be enabled - so if something's not working as
# you might expect, make sure that you have specifically enabled it
# below.
#

#
# This should be changed to whatever you set DocumentRoot to.
#
<Directory "/var/www/html">

#
# Possible values for the Options directive are "None", "All",
# or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All"
# doesn't give it to you.
#
# The Options directive is both complicated and important.  Please see
# http://httpd.apache.org/docs/2.2/mod/core.html#options
# for more information.
#
    Options Indexes FollowSymLinks

#
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be "All", "None", or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
    AllowOverride None

#
# Controls who can get stuff from this server.
#
    Order allow,deny
    Allow from all

</Directory>

#
# UserDir: The name of the directory that is appended onto a user's home
# directory if a ~user request is received.
#
# The path to the end user account 'public_html' directory must be
# accessible to the webserver userid.  This usually means that ~userid
# must have permissions of 711, ~userid/public_html must have permissions
# of 755, and documents contained therein must be world-readable.
# Otherwise, the client will only receive a "403 Forbidden" message.
#
# See also: http://httpd.apache.org/docs/misc/FAQ.html#forbidden
#
<IfModule mod_userdir.c>
    #
    # UserDir is disabled by default since it can confirm the presence
    # of a username on the system (depending on home directory
    # permissions).
    #
    UserDir disabled

    #
    # To enable requests to /~user/ to serve the user's public_html
    # directory, remove the "UserDir disabled" line above, and uncomment
    # the following line instead:
    #
    #UserDir public_html

</IfModule>

#
# Control access to UserDir directories.  The following is an example
# for a site where these directories are restricted to read-only.
#
#<Directory /home/*/public_html>
#    AllowOverride FileInfo AuthConfig Limit
#    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
#    <Limit GET POST OPTIONS>
#        Order allow,deny
#        Allow from all
#    </Limit>
#    <LimitExcept GET POST OPTIONS>
#        Order deny,allow
#        Deny from all
#    </LimitExcept>
#</Directory>

#
# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
# The index.html.var file (a type-map) is used to deliver content-
# negotiated documents.  The MultiViews Option can be used for the
# same purpose, but it is much slower.
#
DirectoryIndex index.html index.html.var

#
# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#
AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being
# viewed by Web clients.
#
<Files ~ "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy All
</Files>

#
# TypesConfig describes where the mime.types file (or equivalent) is
# to be found.
#
TypesConfig /etc/mime.types

#
# DefaultType is the default MIME type the server will use for a document
# if it cannot otherwise determine one, such as from filename extensions.
# If your server contains mostly text or HTML documents, "text/plain" is
# a good value.  If most of your content is binary, such as applications
# or images, you may want to use "application/octet-stream" instead to
# keep browsers from trying to display binary files as though they are
# text.
#
DefaultType text/plain

#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
<IfModule mod_mime_magic.c>
#   MIMEMagicFile /usr/share/magic.mime
    MIMEMagicFile conf/magic
</IfModule>

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it'd be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
HostnameLookups Off

#
# EnableMMAP: Control whether memory-mapping is used to deliver
# files (assuming that the underlying OS supports it).
# The default is on; turn this off if you serve from NFS-mounted
# filesystems.  On some systems, turning it off (regardless of
# filesystem) can improve performance; for details, please see
# http://httpd.apache.org/docs/2.2/mod/core.html#enablemmap
#
#EnableMMAP off

#
# EnableSendfile: Control whether the sendfile kernel support is
# used to deliver files (assuming that the OS supports it).
# The default is on; turn this off if you serve from NFS-mounted
# filesystems.  Please see
# http://httpd.apache.org/docs/2.2/mod/core.html#enablesendfile
#
#EnableSendfile off

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog logs/error_log

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

#
# The following directives define some format nicknames for use with
# a CustomLog directive (see below).
#
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %b" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# "combinedio" includes actual counts of actual bytes received (%I) and sent (%O); this
# requires the mod_logio module to be loaded.
#LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio

#
# The location and format of the access logfile (Common Logfile Format).
# If you do not define any access logfiles within a <VirtualHost>
# container, they will be logged here.  Contrariwise, if you *do*
# define per-<VirtualHost> access logfiles, transactions will be
# logged therein and *not* in this file.
#
#CustomLog logs/access_log common

#
# If you would like to have separate agent and referer logfiles, uncomment
# the following directives.
#
#CustomLog logs/referer_log referer
#CustomLog logs/agent_log agent

#
# For a single logfile with access, agent, and referer information
# (Combined Logfile Format), use the following directive:
#
CustomLog logs/access_log combined

#
# Optionally add a line containing the server version and virtual host
# name to server-generated pages (internal error documents, FTP directory
# listings, mod_status and mod_info output etc., but not CGI generated
# documents or custom error documents).
# Set to "EMail" to also include a mailto: link to the ServerAdmin.
# Set to one of:  On | Off | EMail
#
ServerSignature On

#
# Aliases: Add here as many aliases as you need (with no limit). The format is
# Alias fakename realname
#
# Note that if you include a trailing / on fakename then the server will
# require it to be present in the URL.  So "/icons" isn't aliased in this
# example, only "/icons/".  If the fakename is slash-terminated, then the
# realname must also be slash terminated, and if the fakename omits the
# trailing slash, the realname must also omit it.
#
# We include the /icons/ alias for FancyIndexed directory listings.  If you
# do not use FancyIndexing, you may comment this out.
#
Alias /icons/ "/var/www/icons/"

<Directory "/var/www/icons">
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

#
# WebDAV module configuration section.
#
<IfModule mod_dav_fs.c>
    # Location of the WebDAV lock database.
    DAVLockDB /var/lib/dav/lockdb
</IfModule>

#
# ScriptAlias: This controls which directories contain server scripts.
# ScriptAliases are essentially the same as Aliases, except that
# documents in the realname directory are treated as applications and
# run by the server when requested rather than as documents sent to the client.
# The same rules about trailing "/" apply to ScriptAlias directives as to
# Alias.
#
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

#
# "/var/www/cgi-bin" should be changed to whatever your ScriptAliased
# CGI directory exists, if you have that configured.
#
<Directory "/var/www/cgi-bin">
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
</Directory>

#
# Redirect allows you to tell clients about documents which used to exist in
# your server's namespace, but do not anymore. This allows you to tell the
# clients where to look for the relocated document.
# Example:
# Redirect permanent /foo http://www.example.com/bar

#
# Directives controlling the display of server-generated directory listings.
#

#
# IndexOptions: Controls the appearance of server-generated directory
# listings.
#
IndexOptions FancyIndexing VersionSort NameWidth=* HTMLTable Charset=UTF-8

#
# AddIcon* directives tell the server which icon to show for different
# files or filename extensions.  These are only displayed for
# FancyIndexed directories.
#
AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip

AddIconByType (TXT,/icons/text.gif) text/*
AddIconByType (IMG,/icons/image2.gif) image/*
AddIconByType (SND,/icons/sound2.gif) audio/*
AddIconByType (VID,/icons/movie.gif) video/*

AddIcon /icons/binary.gif .bin .exe
AddIcon /icons/binhex.gif .hqx
AddIcon /icons/tar.gif .tar
AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
AddIcon /icons/a.gif .ps .ai .eps
AddIcon /icons/layout.gif .html .shtml .htm .pdf
AddIcon /icons/text.gif .txt
AddIcon /icons/c.gif .c
AddIcon /icons/p.gif .pl .py
AddIcon /icons/f.gif .for
AddIcon /icons/dvi.gif .dvi
AddIcon /icons/uuencoded.gif .uu
AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
AddIcon /icons/tex.gif .tex
AddIcon /icons/bomb.gif core

AddIcon /icons/back.gif ..
AddIcon /icons/hand.right.gif README
AddIcon /icons/folder.gif ^^DIRECTORY^^
AddIcon /icons/blank.gif ^^BLANKICON^^

#
# DefaultIcon is which icon to show for files which do not have an icon
# explicitly set.
#
DefaultIcon /icons/unknown.gif

#
# AddDescription allows you to place a short description after a file in
# server-generated indexes.  These are only displayed for FancyIndexed
# directories.
# Format: AddDescription "description" filename
#
#AddDescription "GZIP compressed document" .gz
#AddDescription "tar archive" .tar
#AddDescription "GZIP compressed tar archive" .tgz

#
# ReadmeName is the name of the README file the server will look for by
# default, and append to directory listings.
#
# HeaderName is the name of a file which should be prepended to
# directory indexes.
ReadmeName README.html
HeaderName HEADER.html

#
# IndexIgnore is a set of filenames which directory indexing should ignore
# and not include in the listing.  Shell-style wildcarding is permitted.
#
IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

#
# DefaultLanguage and AddLanguage allows you to specify the language of
# a document. You can then use content negotiation to give a browser a
# file in a language the user can understand.
#
# Specify a default language. This means that all data
# going out without a specific language tag (see below) will
# be marked with this one. You probably do NOT want to set
# this unless you are sure it is correct for all cases.
#
# * It is generally better to not mark a page as
# * being a certain language than marking it with the wrong
# * language!
#
# DefaultLanguage nl
#
# Note 1: The suffix does not have to be the same as the language
# keyword --- those with documents in Polish (whose net-standard
# language code is pl) may wish to use "AddLanguage pl .po" to
# avoid the ambiguity with the common suffix for perl scripts.
#
# Note 2: The example entries below illustrate that in some cases
# the two character 'Language' abbreviation is not identical to
# the two character 'Country' code for its country,
# E.g. 'Danmark/dk' versus 'Danish/da'.
#
# Note 3: In the case of 'ltz' we violate the RFC by using a three char
# specifier. There is 'work in progress' to fix this and get
# the reference data for rfc1766 cleaned up.
#
# Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl)
# English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de)
# Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja)
# Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn)
# Norwegian (no) - Polish (pl) - Portugese (pt)
# Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv)
# Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW)
#
AddLanguage ca .ca
AddLanguage cs .cz .cs
AddLanguage da .dk
AddLanguage de .de
AddLanguage el .el
AddLanguage en .en
AddLanguage eo .eo
AddLanguage es .es
AddLanguage et .et
AddLanguage fr .fr
AddLanguage he .he
AddLanguage hr .hr
AddLanguage it .it
AddLanguage ja .ja
AddLanguage ko .ko
AddLanguage ltz .ltz
AddLanguage nl .nl
AddLanguage nn .nn
AddLanguage no .no
AddLanguage pl .po
AddLanguage pt .pt
AddLanguage pt-BR .pt-br
AddLanguage ru .ru
AddLanguage sv .sv
AddLanguage zh-CN .zh-cn
AddLanguage zh-TW .zh-tw

#
# LanguagePriority allows you to give precedence to some languages
# in case of a tie during content negotiation.
#
# Just list the languages in decreasing order of preference. We have
# more or less alphabetized them here. You probably want to change this.
#
LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW

#
# ForceLanguagePriority allows you to serve a result page rather than
# MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback)
# [in case no accepted languages matched the available variants]
#
ForceLanguagePriority Prefer Fallback

#
# Specify a default charset for all content served; this enables
# interpretation of all content as UTF-8 by default.  To use the
# default browser choice (ISO-8859-1), or to allow the META tags
# in HTML content to override this choice, comment out this
# directive:
#
AddDefaultCharset UTF-8

#
# AddType allows you to add to or override the MIME configuration
# file mime.types for specific file types.
#
#AddType application/x-tar .tgz

#
# AddEncoding allows you to have certain browsers uncompress
# information on the fly. Note: Not all browsers support this.
# Despite the name similarity, the following Add* directives have nothing
# to do with the FancyIndexing customization directives above.
#
#AddEncoding x-compress .Z
#AddEncoding x-gzip .gz .tgz

# If the AddEncoding directives above are commented-out, then you
# probably should define those extensions to indicate media types:
#
AddType application/x-compress .Z
AddType application/x-gzip .gz .tgz

#
#   MIME-types for downloading Certificates and CRLs
#
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl    .crl

#
# AddHandler allows you to map certain file extensions to "handlers":
# actions unrelated to filetype. These can be either built into the server
# or added with the Action directive (see below)
#
# To use CGI scripts outside of ScriptAliased directories:
# (You will also need to add "ExecCGI" to the "Options" directive.)
#
#AddHandler cgi-script .cgi

#
# For files that include their own HTTP headers:
#
#AddHandler send-as-is asis

#
# For type maps (negotiated resources):
# (This is enabled by default to allow the Apache "It Worked" page
#  to be distributed in multiple languages.)
#
AddHandler type-map var

#
# Filters allow you to process content before it is sent to the client.
#
# To parse .shtml files for server-side includes (SSI):
# (You will also need to add "Includes" to the "Options" directive.)
#
AddType text/html .shtml
AddOutputFilter INCLUDES .shtml

#
# Action lets you define media types that will execute a script whenever
# a matching file is called. This eliminates the need for repeated URL
# pathnames for oft-used CGI file processors.
# Format: Action media/type /cgi-script/location
# Format: Action handler-name /cgi-script/location
#

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# Putting this all together, we can internationalize error responses.
#
# We use Alias to redirect any /error/HTTP_<error>.html.var response to
# our collection of by-error message multi-language collections.  We use
# includes to substitute the appropriate text.
#
# You can modify the messages' appearance without changing any of the
# default HTTP_<error>.html.var files by adding the line:
#
#   Alias /error/include/ "/your/include/path/"
#
# which allows you to create your own set of files by starting with the
# /var/www/error/include/ files and
# copying them to /your/include/path/, even on a per-VirtualHost basis.
#

Alias /error/ "/var/www/error/"

<IfModule mod_negotiation.c>
<IfModule mod_include.c>
    <Directory "/var/www/error">
        AllowOverride None
        Options IncludesNoExec
        AddOutputFilter Includes html
        AddHandler type-map var
        Order allow,deny
        Allow from all
        LanguagePriority en es de fr
        ForceLanguagePriority Prefer Fallback
    </Directory>

#    ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
#    ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
#    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
#    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
#    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
#    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
#    ErrorDocument 410 /error/HTTP_GONE.html.var
#    ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
#    ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
#    ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
#    ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
#    ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
#    ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
#    ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
#    ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
#    ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
#    ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var

</IfModule>
</IfModule>

#
# The following directives modify normal HTTP response behavior to
# handle known problems with browser implementations.
#
BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0

#
# The following directive disables redirects on non-GET requests for
# a directory that does not include the trailing slash.  This fixes a
# problem with Microsoft WebFolders which does not appropriately handle
# redirects for folders with DAV methods.
# Same deal with Apple's DAV filesystem and Gnome VFS support for DAV.
#
BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
BrowserMatch "MS FrontPage" redirect-carefully
BrowserMatch "^WebDrive" redirect-carefully
BrowserMatch "^WebDAVFS/1.[0123]" redirect-carefully
BrowserMatch "^gnome-vfs/1.0" redirect-carefully
BrowserMatch "^XML Spy" redirect-carefully
BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully

#
# Allow server status reports generated by mod_status,
# with the URL of http://servername/server-status
# Change the ".example.com" to match your domain to enable.
#
#<Location /server-status>
#    SetHandler server-status
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>

#
# Allow remote server configuration reports, with the URL of
#  http://servername/server-info (requires that mod_info.c be loaded).
# Change the ".example.com" to match your domain to enable.
#
#<Location /server-info>
#    SetHandler server-info
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>

#
# Proxy Server directives. Uncomment the following lines to
# enable the proxy server:
#
#<IfModule mod_proxy.c>
#ProxyRequests On
#
#<Proxy *>
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Proxy>

#
# Enable/disable the handling of HTTP/1.1 "Via:" headers.
# ("Full" adds the server version; "Block" removes all outgoing Via: headers)
# Set to one of: Off | On | Full | Block
#
#ProxyVia On

#
# To enable a cache of proxied content, uncomment the following lines.
# See http://httpd.apache.org/docs/2.2/mod/mod_cache.html for more details.
#
#<IfModule mod_disk_cache.c>
#   CacheEnable disk /
#   CacheRoot "/var/cache/mod_proxy"
#</IfModule>
#

#</IfModule>
# End of proxy directives.

### Section 3: Virtual Hosts
#
# VirtualHost: If you want to maintain multiple domains/hostnames on your
# machine you can setup VirtualHost containers for them. Most configurations
# use only name-based virtual hosts so the server doesn't need to worry about
# IP addresses. This is indicated by the asterisks in the directives below.
#
# Please see the documentation at
# <URL:http://httpd.apache.org/docs/2.2/vhosts/>
# for further details before you try to setup virtual hosts.
#
# You may use the command line option '-S' to verify your virtual host
# configuration.

#
# Use name-based virtual hosting.
#
#NameVirtualHost *:80
#
# NOTE: NameVirtualHost cannot be used without a port specifier
# (e.g. :80) if mod_ssl is being used, due to the nature of the
# SSL protocol.
#

#
# VirtualHost example:
# Almost any Apache directive may go into a VirtualHost container.
# The first VirtualHost section is used for requests without a known
# server name.
#
#<VirtualHost *:80>
#    ServerAdmin webmaster@dummy-host.example.com
#    DocumentRoot /www/docs/dummy-host.example.com
#    ServerName dummy-host.example.com
#    ErrorLog logs/dummy-host.example.com-error_log
#    CustomLog logs/dummy-host.example.com-access_log common
#</VirtualHost>
[root@prodnagios nagios]#




#########################
#########################







##############Nagios client side configuration#########
#######################################################################################################






[root@PreProd-SystemData-1a-01 harish.k]# cd
[root@PreProd-SystemData-1a-01 ~]# cat /etc/nagios/nrpe.cfg
#############################################################################
# Sample NRPE Config File
# Written by: Ethan Galstad (nagios@nagios.org)
#
# Last Modified: 11-23-2007
#
# NOTES:
# This is a sample configuration file for the NRPE daemon.  It needs to be
# located on the remote host that is running the NRPE daemon, not the host
# from which the check_nrpe client is being executed.
#############################################################################


# LOG FACILITY
# The syslog facility that should be used for logging purposes.

log_facility=daemon



# PID FILE
# The name of the file in which the NRPE daemon should write it's process ID
# number.  The file is only written if the NRPE daemon is started by the root
# user and is running in standalone mode.

pid_file=/var/run/nrpe/nrpe.pid



# PORT NUMBER
# Port number we should wait for connections on.
# NOTE: This must be a non-priviledged port (i.e. > 1024).
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

server_port=5666



# SERVER ADDRESS
# Address that nrpe should bind to in case there are more than one interface
# and you do not want nrpe to bind on all interfaces.
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

#server_address=127.0.0.1



# NRPE USER
# This determines the effective user that the NRPE daemon should run as.
# You can either supply a username or a UID.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_user=nrpe



# NRPE GROUP
# This determines the effective group that the NRPE daemon should run as.
# You can either supply a group name or a GID.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_group=nrpe



# ALLOWED HOST ADDRESSES
# This is an optional comma-delimited list of IP address or hostnames
# that are allowed to talk to the NRPE daemon. Network addresses with a bit mask
# (i.e. 192.168.1.0/24) are also supported. Hostname wildcards are not currently
# supported.
#
# Note: The daemon only does rudimentary checking of the client's IP
# address.  I would highly recommend adding entries in your /etc/hosts.allow
# file to allow only the specified host to connect to the port
# you are running this daemon on.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

allowed_hosts=10.0.0.35



# COMMAND ARGUMENT PROCESSING
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments to commands that are executed.  This option only works
# if the daemon was configured with the --enable-command-args configure script
# option.
#
# *** ENABLING THIS OPTION IS A SECURITY RISK! ***
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow arguments, 1=allow command arguments

dont_blame_nrpe=0



# BASH COMMAND SUBTITUTION
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments that contain bash command substitutions of the form
# $(...).  This option only works if the daemon was configured with both
# the --enable-command-args and --enable-bash-command-substitution configure
# script options.
#
# *** ENABLING THIS OPTION IS A HIGH SECURITY RISK! ***
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow bash command substitutions,
#         1=allow bash command substitutions

allow_bash_command_substitution=0



# COMMAND PREFIX
# This option allows you to prefix all commands with a user-defined string.
# A space is automatically added between the specified prefix string and the
# command line from the command definition.
#
# *** THIS EXAMPLE MAY POSE A POTENTIAL SECURITY RISK, SO USE WITH CAUTION! ***
# Usage scenario:
# Execute restricted commmands using sudo.  For this to work, you need to add
# the nagios user to your /etc/sudoers.  An example entry for alllowing
# execution of the plugins from might be:
#
# nagios          ALL=(ALL) NOPASSWD: /usr/lib/nagios/plugins/
#
# This lets the nagios user run all commands in that directory (and only them)
# without asking for a password.  If you do this, make sure you don't give
# random users write access to that directory or its contents!

# command_prefix=/usr/bin/sudo



# DEBUGGING OPTION
# This option determines whether or not debugging messages are logged to the
# syslog facility.
# Values: 0=debugging off, 1=debugging on

debug=0



# COMMAND TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# allow plugins to finish executing before killing them off.

command_timeout=60



# CONNECTION TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# wait for a connection to be established before exiting. This is sometimes
# seen where a network problem stops the SSL being established even though
# all network sessions are connected. This causes the nrpe daemons to
# accumulate, eating system resources. Do not set this too low.

connection_timeout=300



# WEEK RANDOM SEED OPTION
# This directive allows you to use SSL even if your system does not have
# a /dev/random or /dev/urandom (on purpose or because the necessary patches
# were not applied). The random number generator will be seeded from a file
# which is either a file pointed to by the environment valiable $RANDFILE
# or $HOME/.rnd. If neither exists, the pseudo random number generator will
# be initialized and a warning will be issued.
# Values: 0=only seed from /dev/[u]random, 1=also seed from weak randomness

#allow_weak_random_seed=1



# INCLUDE CONFIG FILE
# This directive allows you to include definitions from an external config file.

#include=<somefile.cfg>



# COMMAND DEFINITIONS
# Command definitions that this daemon will run.  Definitions
# are in the following format:
#
# command[<command_name>]=<command_line>
#
# When the daemon receives a request to return the results of <command_name>
# it will execute the command specified by the <command_line> argument.
#
# Unlike Nagios, the command line cannot contain macros - it must be
# typed exactly as it should be executed.
#
# Note: Any plugins that are used in the command lines must reside
# on the machine that this daemon is running on!  The examples below
# assume that you have plugins installed in a /usr/local/nagios/libexec
# directory.  Also note that you will have to modify the definitions below
# to match the argument format the plugins expect.  Remember, these are
# examples only!


# The following examples use hardcoded command arguments...

command[check_users]=/usr/lib64/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib64/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
command[check_hda1]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /dev/hda1
command[check_zombie_procs]=/usr/lib64/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib64/nagios/plugins/check_procs -w 150 -c 200
command[SystemData_Service]=/usr/lib64/nagios/plugins/SystemData_Service
command[SystemData_Disk_Usage]=/usr/lib64/nagios/plugins/SystemData_Disk_Usage
command[systemdata_healthcheck]=/usr/lib64/nagios/plugins/check_http -H 11.2.1.69 -p 8055 -u /healthcheck
# The following examples allow user-supplied arguments and can
# only be used if the NRPE daemon was compiled with support for
# command arguments *AND* the dont_blame_nrpe directive in this
# config file is set to '1'.  This poses a potential security risk, so
# make sure you read the SECURITY file before doing this.

#command[check_users]=/usr/lib64/nagios/plugins/check_users -w $ARG1$ -c $ARG2$
#command[check_load]=/usr/lib64/nagios/plugins/check_load -w $ARG1$ -c $ARG2$
#command[check_disk]=/usr/lib64/nagios/plugins/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
#command[check_procs]=/usr/lib64/nagios/plugins/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$



# INCLUDE CONFIG DIRECTORY
# This directive allows you to include definitions from config files (with a
# .cfg extension) in one or more directories (with recursion).

include_dir=/etc/nrpe.d/



##########################
#############



[root@PreProd-SystemData-1a-01 ~]# cd /usr/lib64/nagios/plugins/
[root@PreProd-SystemData-1a-01 plugins]# pwd
/usr/lib64/nagios/plugins
[root@PreProd-SystemData-1a-01 plugins]# ls
check_http  check_nrpe  negate  SystemData_Disk_Usage  SystemData_Service  urlize  utils.sh
[root@PreProd-SystemData-1a-01 plugins]#




#############





[root@PreProd-SystemData-1a-01 plugins]# ls
check_http  check_nrpe  negate  SystemData_Disk_Usage  SystemData_Service  urlize  utils.sh
[root@PreProd-SystemData-1a-01 plugins]# cat SystemData_Disk_Usage
#!/bin/bash
used_space=`df -h / | grep -v Filesystem | awk '{print $5}' | sed 's/%//g'`
case $used_space in
[1-70]*)
echo "OK - $used_space% of disk space used."
exit 0
;;
[71-85]*)
echo "WARNING - $used_space% of disk space used."
exit 1
;;
[86-100]*)
echo "CRITICAL - $used_space% of disk space used."
exit 2
;;
*)
echo "UNKNOWN - $used_space% of disk space used."
exit 3
;;
esac
[root@PreProd-SystemData-1a-01 plugins]# cat SystemData_Service
#!/bin/bash
echo -n "1.SystemDataService " > /tmp/SystemDataService
aws elb describe-instance-health --load-balancer-name  SystemData    >>  /tmp/SystemDataService
echo " " >> /tmp/SystemDataService
Servicename=`cat /tmp/SystemDataService | awk '{print $1}'`
ServiceStatus=`cat /tmp/SystemDataService | awk '{print $6}'`
echo "$Servicename:$ServiceStatus"
output="Service-Name: $Servicename Service-Status:$ServiceStatus | Service-Name=$Servicename, Service-Status=$ServiceStatus"
if [ "$ServiceStatus" == "InService" ]
then
    echo "OK - $output"
    exit 0
fi
if [ "$servicestatus"  == "OutService" ]
then
   echo "CRITICAL- $output"
   exit 2
fi
[root@PreProd-SystemData-1a-01 plugins]#

#########################################################








